
dog_sw_test2.elf:     file format elf32-littlenios2
dog_sw_test2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001a70 memsz 0x00001a70 flags r-x
    LOAD off    0x00002a90 vaddr 0x00011a90 paddr 0x00011ba4 align 2**12
         filesz 0x00000114 memsz 0x00000114 flags rw-
    LOAD off    0x00002cb8 vaddr 0x00011cb8 paddr 0x00011cb8 align 2**12
         filesz 0x00000000 memsz 0x00000204 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000017d8  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  00011958  00011958  00002958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000114  00011a90  00011ba4  00002a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000204  00011cb8  00011cb8  00002cb8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00011ebc  00011ebc  00002ba4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002ba4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000460  00000000  00000000  00002bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003fdb  00000000  00000000  00003028  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001aa0  00000000  00000000  00007003  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001c08  00000000  00000000  00008aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000005f0  00000000  00000000  0000a6ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001718  00000000  00000000  0000ac9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000023cd  00000000  00000000  0000c3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000e784  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000448  00000000  00000000  0000e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000102da  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000102dd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000102e0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000102e1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000102e2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000102eb  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  000102fd  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001f  00000000  00000000  0001030f  2**0
                  CONTENTS, READONLY
 26 .jdi          00005009  00000000  00000000  0001032e  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00049c3e  00000000  00000000  00015337  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00011958 l    d  .rodata	00000000 .rodata
00011a90 l    d  .rwdata	00000000 .rwdata
00011cb8 l    d  .bss	00000000 .bss
00011ebc l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../dog_sw_test2_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 dogtest.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011b00 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000115f0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00011cd4 g     O .bss	00000004 alt_instruction_exception_handler
000111b8 g     F .text	0000002c alt_main
0001023c g     F .text	00000014 led_write
00011dbc g     O .bss	00000100 alt_irq
00011ba4 g       *ABS*	00000000 __flash_rwdata_start
00010378 g     F .text	000000a8 filterFIR
000101bc g     F .text	00000080 sys_timer_isr
00011b88 g     O .rwdata	00000004 jtag_uart
000116dc g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
0001145c g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011cd8 g     O .bss	00000004 errno
00011ccc g     O .bss	00000004 alt_argv
00019b84 g       *ABS*	00000000 _gp
0001139c g     F .text	00000004 usleep
00011b2c g     O .rwdata	00000030 alt_fd_list
00011664 g     F .text	00000074 alt_find_dev
000116e4 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0001189c g     F .text	00000064 .hidden __udivsi3
00011b8c g     O .rwdata	00000004 alt_max_fd
00011044 g     F .text	00000094 alt_irq_register
00010ed0 g     F .text	00000110 .hidden __extendsfdf2
00011ebc g       *ABS*	00000000 __bss_end
00011cc4 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00011b5c g     O .rwdata	00000028 alt_dev_null
000115ec g     F .text	00000004 alt_dcache_flush_all
00010e50 g     F .text	00000080 .hidden __fixdfsi
00011ba4 g       *ABS*	00000000 __ram_rwdata_end
00010284 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00011b90 g     O .rwdata	00000008 alt_dev_list
00011a90 g       *ABS*	00000000 __ram_rodata_end
00011cbc g     O .bss	00000001 led
00011900 g     F .text	00000058 .hidden __umodsi3
00011d4c g     O .bss	00000070 filter_coefficients
00011ebc g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00010fe0 g     F .text	00000064 .hidden __clzsi2
000113d0 g     F .text	00000034 altera_avalon_jtag_uart_write
000111e4 g     F .text	00000170 alt_printf
00010180 g     F .text	0000003c _start
00011cc0 g     O .bss	00000004 level
000113c0 g     F .text	00000010 alt_sys_init
0001140c g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
000105bc g     F .text	00000028 .hidden __mulsi3
00011a90 g       *ABS*	00000000 __ram_rwdata_start
00011958 g       *ABS*	00000000 __ram_rodata_start
00011564 g     F .text	00000088 alt_busy_sleep
000114b4 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00011758 g     F .text	00000030 memcmp
00011ebc g       *ABS*	00000000 __alt_stack_base
000105e4 g     F .text	0000086c .hidden __muldf3
000115f8 g     F .text	0000006c alt_dev_llist_insert
00011cb8 g       *ABS*	00000000 __bss_start
00010420 g     F .text	0000019c main
00011cc8 g     O .bss	00000004 alt_envp
00011ba0 g     O .rwdata	00000004 alt_errno
000117a4 g     F .text	00000084 .hidden __divsi3
00011958 g       *ABS*	00000000 __flash_rodata_start
000113a0 g     F .text	00000020 alt_irq_init
000102f4 g     F .text	00000084 floatArrayToFixed
00011984 g     O .rodata	00000100 .hidden __clz_tab
00011cd0 g     O .bss	00000004 alt_argc
00011cdc g     O .bss	00000070 filter_state
00010020 g       .exceptions	00000000 alt_irq_entry
00011cb8 g     O .bss	00000001 pwm
00011b98 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011404 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00011ba4 g       *ABS*	00000000 _edata
00011ebc g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00011828 g     F .text	00000074 .hidden __modsi3
0001150c g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010250 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
00011420 g     F .text	00000020 alt_up_accelerometer_spi_read
00011440 g     F .text	0000001c alt_up_accelerometer_spi_write
00011788 g     F .text	0000001c strlen
00011354 g     F .text	00000048 alt_putchar
000116d8 g     F .text	00000004 alt_icache_flush_all
00011b84 g     O .rwdata	00000004 alt_priority_mask
00011a90 g     O .rwdata	00000070 filter_coefficientsf
000110d8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	84076f04 	addi	r16,r16,7612

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a05417 	ldw	r2,-32432(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a6e114 	ori	gp,gp,39812
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	10872e14 	ori	r2,r2,7352

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c7af14 	ori	r3,r3,7868

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00110d80 	call	110d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00111b80 	call	111b8 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840004 	addi	r2,r2,4096
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a04f17 	ldw	r2,-32452(gp)
   101cc:	d1604d07 	ldb	r5,-32460(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c41004 	addi	r3,r3,4160
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a04e03 	ldbu	r2,-32456(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a04e03 	ldbu	r2,-32456(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a04e03 	ldbu	r2,-32456(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a04d03 	ldbu	r2,-32460(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0204d05 	stb	zero,-32460(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a04d05 	stb	r2,-32460(gp)
   10238:	f800283a 	ret

0001023c <led_write>:
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   1023c:	008000b4 	movhi	r2,2
   10240:	21003fcc 	andi	r4,r4,255
   10244:	10841004 	addi	r2,r2,4160
   10248:	11000035 	stwio	r4,0(r2)
   1024c:	f800283a 	ret

00010250 <convert_read>:
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
   10250:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10254:	2005d1ba 	srai	r2,r4,6
    * level = (acc_read >> 1) & 0x1f;
   10258:	2009d07a 	srai	r4,r4,1
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   1025c:	10c001cc 	andi	r3,r2,7
   10260:	00800204 	movi	r2,8
   10264:	10cfc83a 	sub	r7,r2,r3
   10268:	11ce983a 	sll	r7,r2,r7
   1026c:	10c5d83a 	sra	r2,r2,r3
    * level = (acc_read >> 1) & 0x1f;
   10270:	210007cc 	andi	r4,r4,31
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10274:	3884b03a 	or	r2,r7,r2
   10278:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   1027c:	29000015 	stw	r4,0(r5)
   10280:	f800283a 	ret

00010284 <timer_init>:
    } else {
        pwm++;
    }

}
void timer_init(void * isr) {
   10284:	defffe04 	addi	sp,sp,-8
   10288:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   1028c:	040000b4 	movhi	r16,2
    } else {
        pwm++;
    }

}
void timer_init(void * isr) {
   10290:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10294:	84040104 	addi	r16,r16,4100
   10298:	008000c4 	movi	r2,3
   1029c:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   102a0:	00c000b4 	movhi	r3,2
   102a4:	0005883a 	mov	r2,zero
   102a8:	18c40004 	addi	r3,r3,4096
   102ac:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   102b0:	00c000b4 	movhi	r3,2
   102b4:	18c40204 	addi	r3,r3,4104
   102b8:	01424004 	movi	r5,2304
   102bc:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   102c0:	00c000b4 	movhi	r3,2
   102c4:	18c40304 	addi	r3,r3,4108
   102c8:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   102cc:	200d883a 	mov	r6,r4
   102d0:	000b883a 	mov	r5,zero
   102d4:	01000084 	movi	r4,2
   102d8:	00110440 	call	11044 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   102dc:	008001c4 	movi	r2,7
   102e0:	80800035 	stwio	r2,0(r16)

}
   102e4:	dfc00117 	ldw	ra,4(sp)
   102e8:	dc000017 	ldw	r16,0(sp)
   102ec:	dec00204 	addi	sp,sp,8
   102f0:	f800283a 	ret

000102f4 <floatArrayToFixed>:

#define NUM_TAPS 28
#define Q_BITS 8

void floatArrayToFixed(alt_32 fixedArray[], float floatArray[], int arraySize) {
   102f4:	defffb04 	addi	sp,sp,-20
   102f8:	dcc00315 	stw	r19,12(sp)
   102fc:	dc800215 	stw	r18,8(sp)
   10300:	dc400115 	stw	r17,4(sp)
   10304:	dc000015 	stw	r16,0(sp)
   10308:	dfc00415 	stw	ra,16(sp)
   1030c:	3027883a 	mov	r19,r6
   10310:	2823883a 	mov	r17,r5
   10314:	2025883a 	mov	r18,r4
    for (int i = 0; i < arraySize; i++) {
   10318:	0021883a 	mov	r16,zero
   1031c:	84c00f0e 	bge	r16,r19,1035c <floatArrayToFixed+0x68>
        fixedArray[i] = (alt_32)(floatArray[i] * pow(2,Q_BITS));
   10320:	89000017 	ldw	r4,0(r17)

#define NUM_TAPS 28
#define Q_BITS 8

void floatArrayToFixed(alt_32 fixedArray[], float floatArray[], int arraySize) {
    for (int i = 0; i < arraySize; i++) {
   10324:	84000044 	addi	r16,r16,1
   10328:	8c400104 	addi	r17,r17,4
        fixedArray[i] = (alt_32)(floatArray[i] * pow(2,Q_BITS));
   1032c:	0010ed00 	call	10ed0 <__extendsfdf2>
   10330:	000d883a 	mov	r6,zero
   10334:	01d01c34 	movhi	r7,16496
   10338:	1009883a 	mov	r4,r2
   1033c:	180b883a 	mov	r5,r3
   10340:	00105e40 	call	105e4 <__muldf3>
   10344:	1009883a 	mov	r4,r2
   10348:	180b883a 	mov	r5,r3
   1034c:	0010e500 	call	10e50 <__fixdfsi>
   10350:	90800015 	stw	r2,0(r18)
   10354:	94800104 	addi	r18,r18,4
   10358:	003ff006 	br	1031c <__alt_data_end+0xffff031c>
    }
}
   1035c:	dfc00417 	ldw	ra,16(sp)
   10360:	dcc00317 	ldw	r19,12(sp)
   10364:	dc800217 	ldw	r18,8(sp)
   10368:	dc400117 	ldw	r17,4(sp)
   1036c:	dc000017 	ldw	r16,0(sp)
   10370:	dec00504 	addi	sp,sp,20
   10374:	f800283a 	ret

00010378 <filterFIR>:
alt_32 filter_coefficients[NUM_TAPS];


//const float filter_coefficients[NUM_TAPS] = {0.0245, 0.0245, 0.9510};

alt_32 filterFIR(alt_32 acc_read) {
   10378:	00800074 	movhi	r2,1
   1037c:	10875104 	addi	r2,r2,7492
    for (int i = NUM_TAPS - 1; i > 0; i--)
   10380:	00c006c4 	movi	r3,27
    {
        filter_state[i] = filter_state[i - 1];
   10384:	11400017 	ldw	r5,0(r2)
   10388:	18ffffc4 	addi	r3,r3,-1
   1038c:	10bfff04 	addi	r2,r2,-4
   10390:	11400215 	stw	r5,8(r2)


//const float filter_coefficients[NUM_TAPS] = {0.0245, 0.0245, 0.9510};

alt_32 filterFIR(alt_32 acc_read) {
    for (int i = NUM_TAPS - 1; i > 0; i--)
   10394:	183ffb1e 	bne	r3,zero,10384 <__alt_data_end+0xffff0384>
alt_32 filter_coefficients[NUM_TAPS];


//const float filter_coefficients[NUM_TAPS] = {0.0245, 0.0245, 0.9510};

alt_32 filterFIR(alt_32 acc_read) {
   10398:	defffa04 	addi	sp,sp,-24
    for (int i = NUM_TAPS - 1; i > 0; i--)
    {
        filter_state[i] = filter_state[i - 1];
    }
    filter_state[0] = acc_read;
   1039c:	00800074 	movhi	r2,1
alt_32 filter_coefficients[NUM_TAPS];


//const float filter_coefficients[NUM_TAPS] = {0.0245, 0.0245, 0.9510};

alt_32 filterFIR(alt_32 acc_read) {
   103a0:	dd000415 	stw	r20,16(sp)
   103a4:	dcc00315 	stw	r19,12(sp)
   103a8:	dc800215 	stw	r18,8(sp)
   103ac:	dc400115 	stw	r17,4(sp)
   103b0:	dc000015 	stw	r16,0(sp)
    for (int i = NUM_TAPS - 1; i > 0; i--)
    {
        filter_state[i] = filter_state[i - 1];
    }
    filter_state[0] = acc_read;
   103b4:	10873704 	addi	r2,r2,7388
alt_32 filter_coefficients[NUM_TAPS];


//const float filter_coefficients[NUM_TAPS] = {0.0245, 0.0245, 0.9510};

alt_32 filterFIR(alt_32 acc_read) {
   103b8:	dfc00515 	stw	ra,20(sp)
        filter_state[i] = filter_state[i - 1];
    }
    filter_state[0] = acc_read;
    alt_32 filtered_value = 0.0;
    for (int i = 0; i < NUM_TAPS; i++) {
        filtered_value += (filter_state[i] * filter_coefficients[i]) >> Q_BITS;
   103bc:	05000074 	movhi	r20,1
alt_32 filterFIR(alt_32 acc_read) {
    for (int i = NUM_TAPS - 1; i > 0; i--)
    {
        filter_state[i] = filter_state[i - 1];
    }
    filter_state[0] = acc_read;
   103c0:	11000015 	stw	r4,0(r2)
   103c4:	0021883a 	mov	r16,zero
    alt_32 filtered_value = 0.0;
   103c8:	0025883a 	mov	r18,zero
   103cc:	1023883a 	mov	r17,r2
    for (int i = 0; i < NUM_TAPS; i++) {
        filtered_value += (filter_state[i] * filter_coefficients[i]) >> Q_BITS;
   103d0:	a5075304 	addi	r20,r20,7500
    {
        filter_state[i] = filter_state[i - 1];
    }
    filter_state[0] = acc_read;
    alt_32 filtered_value = 0.0;
    for (int i = 0; i < NUM_TAPS; i++) {
   103d4:	04c01c04 	movi	r19,112
        filtered_value += (filter_state[i] * filter_coefficients[i]) >> Q_BITS;
   103d8:	8445883a 	add	r2,r16,r17
   103dc:	8507883a 	add	r3,r16,r20
   103e0:	19400017 	ldw	r5,0(r3)
   103e4:	11000017 	ldw	r4,0(r2)
   103e8:	84000104 	addi	r16,r16,4
   103ec:	00105bc0 	call	105bc <__mulsi3>
   103f0:	1005d23a 	srai	r2,r2,8
   103f4:	90a5883a 	add	r18,r18,r2
    {
        filter_state[i] = filter_state[i - 1];
    }
    filter_state[0] = acc_read;
    alt_32 filtered_value = 0.0;
    for (int i = 0; i < NUM_TAPS; i++) {
   103f8:	84fff71e 	bne	r16,r19,103d8 <__alt_data_end+0xffff03d8>
        filtered_value += (filter_state[i] * filter_coefficients[i]) >> Q_BITS;
    }
    return filtered_value;
}
   103fc:	9005883a 	mov	r2,r18
   10400:	dfc00517 	ldw	ra,20(sp)
   10404:	dd000417 	ldw	r20,16(sp)
   10408:	dcc00317 	ldw	r19,12(sp)
   1040c:	dc800217 	ldw	r18,8(sp)
   10410:	dc400117 	ldw	r17,4(sp)
   10414:	dc000017 	ldw	r16,0(sp)
   10418:	dec00604 	addi	sp,sp,24
   1041c:	f800283a 	ret

00010420 <main>:


int main() {
	floatArrayToFixed(filter_coefficients,filter_coefficientsf, NUM_TAPS);
   10420:	01400074 	movhi	r5,1
   10424:	01000074 	movhi	r4,1
    }
    return filtered_value;
}


int main() {
   10428:	defff404 	addi	sp,sp,-48
	floatArrayToFixed(filter_coefficients,filter_coefficientsf, NUM_TAPS);
   1042c:	01800704 	movi	r6,28
   10430:	2946a404 	addi	r5,r5,6800
   10434:	21075304 	addi	r4,r4,7500
    }
    return filtered_value;
}


int main() {
   10438:	dfc00b15 	stw	ra,44(sp)
   1043c:	dc800715 	stw	r18,28(sp)
   10440:	dd400a15 	stw	r21,40(sp)
   10444:	dd000915 	stw	r20,36(sp)
   10448:	dcc00815 	stw	r19,32(sp)
   1044c:	dc400615 	stw	r17,24(sp)
   10450:	dc000515 	stw	r16,20(sp)
	floatArrayToFixed(filter_coefficients,filter_coefficientsf, NUM_TAPS);
   10454:	00102f40 	call	102f4 <floatArrayToFixed>
    alt_32 x_read,y_read,z_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10458:	01000074 	movhi	r4,1
   1045c:	21065604 	addi	r4,r4,6488
    int sw;
    IOWR(LED_BASE, 0, 0);
   10460:	048000b4 	movhi	r18,2

int main() {
	floatArrayToFixed(filter_coefficients,filter_coefficientsf, NUM_TAPS);
    alt_32 x_read,y_read,z_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10464:	00114040 	call	11404 <alt_up_accelerometer_spi_open_dev>
    int sw;
    IOWR(LED_BASE, 0, 0);
   10468:	94841004 	addi	r18,r18,4160
   1046c:	90000035 	stwio	zero,0(r18)
    if (acc_dev == NULL) {
   10470:	10004826 	beq	r2,zero,10594 <main+0x174>
        return 1;
    }
    int halt = 1;
    timer_init(sys_timer_isr);
   10474:	01000074 	movhi	r4,1
   10478:	21006f04 	addi	r4,r4,444
    while (1) {
    	sw = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   1047c:	054000b4 	movhi	r21,2
    	else if(halt)
    	{
    		alt_printf("!\n");
    		halt = 0;
    	}
    	if((char)IORD(JTAG_UART_BASE, ALTERA_AVALON_JTAG_UART_DATA_REG) == '<')
   10480:	050000b4 	movhi	r20,2
   10484:	1023883a 	mov	r17,r2
    int sw;
    IOWR(LED_BASE, 0, 0);
    if (acc_dev == NULL) {
        return 1;
    }
    int halt = 1;
   10488:	04c00044 	movi	r19,1
    timer_init(sys_timer_isr);
   1048c:	00102840 	call	10284 <timer_init>
    while (1) {
    	sw = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10490:	ad440c04 	addi	r21,r21,4144
    	else if(halt)
    	{
    		alt_printf("!\n");
    		halt = 0;
    	}
    	if((char)IORD(JTAG_UART_BASE, ALTERA_AVALON_JTAG_UART_DATA_REG) == '<')
   10494:	a5041404 	addi	r20,r20,4176
        return 1;
    }
    int halt = 1;
    timer_init(sys_timer_isr);
    while (1) {
    	sw = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10498:	ac000037 	ldwio	r16,0(r21)
   1049c:	0420303a 	nor	r16,zero,r16
    	sw &= (0b1111111111);
   104a0:	8400ffcc 	andi	r16,r16,1023
    	IOWR(LED_BASE, 0, sw);
   104a4:	94000035 	stwio	r16,0(r18)
    	if(sw == 1)
   104a8:	00800044 	movi	r2,1
   104ac:	80801a1e 	bne	r16,r2,10518 <main+0xf8>
    	{
    		halt = 1;
			usleep(500000);
   104b0:	01000234 	movhi	r4,8
   104b4:	21284804 	addi	r4,r4,-24288
   104b8:	001139c0 	call	1139c <usleep>
			alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   104bc:	d9400404 	addi	r5,sp,16
   104c0:	8809883a 	mov	r4,r17
   104c4:	001145c0 	call	1145c <alt_up_accelerometer_spi_read_x_axis>
			alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   104c8:	d9400304 	addi	r5,sp,12
   104cc:	8809883a 	mov	r4,r17
   104d0:	00114b40 	call	114b4 <alt_up_accelerometer_spi_read_y_axis>
			alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
   104d4:	d9400204 	addi	r5,sp,8
   104d8:	8809883a 	mov	r4,r17
   104dc:	001150c0 	call	1150c <alt_up_accelerometer_spi_read_z_axis>
			alt_printf("%x\t\t", x_read);
   104e0:	d9400417 	ldw	r5,16(sp)
   104e4:	01000074 	movhi	r4,1
   104e8:	21065c04 	addi	r4,r4,6512
   104ec:	00111e40 	call	111e4 <alt_printf>
			alt_printf("%x\t\t", y_read);
   104f0:	d9400317 	ldw	r5,12(sp)
   104f4:	01000074 	movhi	r4,1
   104f8:	21065c04 	addi	r4,r4,6512
   104fc:	00111e40 	call	111e4 <alt_printf>
			alt_printf("%x\n", z_read);
   10500:	d9400217 	ldw	r5,8(sp)
   10504:	01000074 	movhi	r4,1
   10508:	21065e04 	addi	r4,r4,6520
   1050c:	00111e40 	call	111e4 <alt_printf>
    	sw = ~IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
    	sw &= (0b1111111111);
    	IOWR(LED_BASE, 0, sw);
    	if(sw == 1)
    	{
    		halt = 1;
   10510:	8027883a 	mov	r19,r16
   10514:	00000506 	br	1052c <main+0x10c>
			alt_printf("%x\t\t", x_read);
			alt_printf("%x\t\t", y_read);
			alt_printf("%x\n", z_read);
			//convert_read(filterFIR(x_read), & level, & led);
    	}
    	else if(halt)
   10518:	98000426 	beq	r19,zero,1052c <main+0x10c>
    	{
    		alt_printf("!\n");
   1051c:	01000074 	movhi	r4,1
   10520:	21065f04 	addi	r4,r4,6524
   10524:	00111e40 	call	111e4 <alt_printf>
    		halt = 0;
   10528:	0027883a 	mov	r19,zero
    	}
    	if((char)IORD(JTAG_UART_BASE, ALTERA_AVALON_JTAG_UART_DATA_REG) == '<')
   1052c:	a0800037 	ldwio	r2,0(r20)
   10530:	01c000b4 	movhi	r7,2
   10534:	10803fcc 	andi	r2,r2,255
   10538:	1080201c 	xori	r2,r2,128
   1053c:	10bfe004 	addi	r2,r2,-128
   10540:	00c00f04 	movi	r3,60
   10544:	39c41404 	addi	r7,r7,4176
   10548:	10ffd31e 	bne	r2,r3,10498 <__alt_data_end+0xffff0498>
    	{
    		char word[6];
    		int index =0;
    		char in =(char)IORD(JTAG_UART_BASE, ALTERA_AVALON_JTAG_UART_DATA_REG);
   1054c:	a1000037 	ldwio	r4,0(r20)
    		halt = 0;
    	}
    	if((char)IORD(JTAG_UART_BASE, ALTERA_AVALON_JTAG_UART_DATA_REG) == '<')
    	{
    		char word[6];
    		int index =0;
   10550:	0007883a 	mov	r3,zero
    		char in =(char)IORD(JTAG_UART_BASE, ALTERA_AVALON_JTAG_UART_DATA_REG);
    		while(in != '>')
   10554:	01800f84 	movi	r6,62
   10558:	20803fcc 	andi	r2,r4,255
   1055c:	1080201c 	xori	r2,r2,128
   10560:	10bfe004 	addi	r2,r2,-128
   10564:	d8cb883a 	add	r5,sp,r3
   10568:	11800426 	beq	r2,r6,1057c <main+0x15c>
    		{
    			word[index]= in;
    			index++;
   1056c:	18c00044 	addi	r3,r3,1
    		char word[6];
    		int index =0;
    		char in =(char)IORD(JTAG_UART_BASE, ALTERA_AVALON_JTAG_UART_DATA_REG);
    		while(in != '>')
    		{
    			word[index]= in;
   10570:	29000005 	stb	r4,0(r5)
    			index++;
    			in = (char)IORD(JTAG_UART_BASE, ALTERA_AVALON_JTAG_UART_DATA_REG);
   10574:	39000037 	ldwio	r4,0(r7)
   10578:	003ff706 	br	10558 <__alt_data_end+0xffff0558>
    		}
    		word[index] = '\0';
    		alt_printf("%s\n",word);
   1057c:	01000074 	movhi	r4,1
    		{
    			word[index]= in;
    			index++;
    			in = (char)IORD(JTAG_UART_BASE, ALTERA_AVALON_JTAG_UART_DATA_REG);
    		}
    		word[index] = '\0';
   10580:	28000005 	stb	zero,0(r5)
    		alt_printf("%s\n",word);
   10584:	21066004 	addi	r4,r4,6528
   10588:	d80b883a 	mov	r5,sp
   1058c:	00111e40 	call	111e4 <alt_printf>
   10590:	003fc106 	br	10498 <__alt_data_end+0xffff0498>
    	}

    }
    return 0;
}
   10594:	00800044 	movi	r2,1
   10598:	dfc00b17 	ldw	ra,44(sp)
   1059c:	dd400a17 	ldw	r21,40(sp)
   105a0:	dd000917 	ldw	r20,36(sp)
   105a4:	dcc00817 	ldw	r19,32(sp)
   105a8:	dc800717 	ldw	r18,28(sp)
   105ac:	dc400617 	ldw	r17,24(sp)
   105b0:	dc000517 	ldw	r16,20(sp)
   105b4:	dec00c04 	addi	sp,sp,48
   105b8:	f800283a 	ret

000105bc <__mulsi3>:
   105bc:	0005883a 	mov	r2,zero
   105c0:	20000726 	beq	r4,zero,105e0 <__mulsi3+0x24>
   105c4:	20c0004c 	andi	r3,r4,1
   105c8:	2008d07a 	srli	r4,r4,1
   105cc:	18000126 	beq	r3,zero,105d4 <__mulsi3+0x18>
   105d0:	1145883a 	add	r2,r2,r5
   105d4:	294b883a 	add	r5,r5,r5
   105d8:	203ffa1e 	bne	r4,zero,105c4 <__alt_data_end+0xffff05c4>
   105dc:	f800283a 	ret
   105e0:	f800283a 	ret

000105e4 <__muldf3>:
   105e4:	deffee04 	addi	sp,sp,-72
   105e8:	dd000c15 	stw	r20,48(sp)
   105ec:	2828d53a 	srli	r20,r5,20
   105f0:	ddc00f15 	stw	r23,60(sp)
   105f4:	282ed7fa 	srli	r23,r5,31
   105f8:	dc000815 	stw	r16,32(sp)
   105fc:	04000434 	movhi	r16,16
   10600:	dcc00b15 	stw	r19,44(sp)
   10604:	843fffc4 	addi	r16,r16,-1
   10608:	dfc01115 	stw	ra,68(sp)
   1060c:	df001015 	stw	fp,64(sp)
   10610:	dd800e15 	stw	r22,56(sp)
   10614:	dd400d15 	stw	r21,52(sp)
   10618:	dc800a15 	stw	r18,40(sp)
   1061c:	dc400915 	stw	r17,36(sp)
   10620:	a501ffcc 	andi	r20,r20,2047
   10624:	2c20703a 	and	r16,r5,r16
   10628:	b827883a 	mov	r19,r23
   1062c:	ba403fcc 	andi	r9,r23,255
   10630:	a0006026 	beq	r20,zero,107b4 <__muldf3+0x1d0>
   10634:	0081ffc4 	movi	r2,2047
   10638:	202d883a 	mov	r22,r4
   1063c:	a0803626 	beq	r20,r2,10718 <__muldf3+0x134>
   10640:	84000434 	orhi	r16,r16,16
   10644:	200ad77a 	srli	r5,r4,29
   10648:	800490fa 	slli	r2,r16,3
   1064c:	202c90fa 	slli	r22,r4,3
   10650:	a53f0044 	addi	r20,r20,-1023
   10654:	28a0b03a 	or	r16,r5,r2
   10658:	002b883a 	mov	r21,zero
   1065c:	000b883a 	mov	r5,zero
   10660:	3804d53a 	srli	r2,r7,20
   10664:	3838d7fa 	srli	fp,r7,31
   10668:	04400434 	movhi	r17,16
   1066c:	8c7fffc4 	addi	r17,r17,-1
   10670:	1081ffcc 	andi	r2,r2,2047
   10674:	3025883a 	mov	r18,r6
   10678:	3c62703a 	and	r17,r7,r17
   1067c:	e2803fcc 	andi	r10,fp,255
   10680:	10006d26 	beq	r2,zero,10838 <__muldf3+0x254>
   10684:	00c1ffc4 	movi	r3,2047
   10688:	10c06526 	beq	r2,r3,10820 <__muldf3+0x23c>
   1068c:	8c400434 	orhi	r17,r17,16
   10690:	300ed77a 	srli	r7,r6,29
   10694:	880690fa 	slli	r3,r17,3
   10698:	302490fa 	slli	r18,r6,3
   1069c:	10bf0044 	addi	r2,r2,-1023
   106a0:	38e2b03a 	or	r17,r7,r3
   106a4:	000f883a 	mov	r7,zero
   106a8:	a087883a 	add	r3,r20,r2
   106ac:	010003c4 	movi	r4,15
   106b0:	3d44b03a 	or	r2,r7,r21
   106b4:	e5ccf03a 	xor	r6,fp,r23
   106b8:	1a000044 	addi	r8,r3,1
   106bc:	20809b36 	bltu	r4,r2,1092c <__muldf3+0x348>
   106c0:	100490ba 	slli	r2,r2,2
   106c4:	01000074 	movhi	r4,1
   106c8:	2101b604 	addi	r4,r4,1752
   106cc:	1105883a 	add	r2,r2,r4
   106d0:	10800017 	ldw	r2,0(r2)
   106d4:	1000683a 	jmp	r2
   106d8:	0001092c 	andhi	zero,zero,1060
   106dc:	00010738 	rdprs	zero,zero,1052
   106e0:	00010738 	rdprs	zero,zero,1052
   106e4:	00010734 	movhi	zero,1052
   106e8:	00010908 	cmpgei	zero,zero,1060
   106ec:	00010908 	cmpgei	zero,zero,1060
   106f0:	000108f0 	cmpltui	zero,zero,1059
   106f4:	00010734 	movhi	zero,1052
   106f8:	00010908 	cmpgei	zero,zero,1060
   106fc:	000108f0 	cmpltui	zero,zero,1059
   10700:	00010908 	cmpgei	zero,zero,1060
   10704:	00010734 	movhi	zero,1052
   10708:	00010918 	cmpnei	zero,zero,1060
   1070c:	00010918 	cmpnei	zero,zero,1060
   10710:	00010918 	cmpnei	zero,zero,1060
   10714:	00010c78 	rdprs	zero,zero,1073
   10718:	2404b03a 	or	r2,r4,r16
   1071c:	1000711e 	bne	r2,zero,108e4 <__muldf3+0x300>
   10720:	05400204 	movi	r21,8
   10724:	0021883a 	mov	r16,zero
   10728:	002d883a 	mov	r22,zero
   1072c:	01400084 	movi	r5,2
   10730:	003fcb06 	br	10660 <__alt_data_end+0xffff0660>
   10734:	500d883a 	mov	r6,r10
   10738:	00800084 	movi	r2,2
   1073c:	38805926 	beq	r7,r2,108a4 <__muldf3+0x2c0>
   10740:	008000c4 	movi	r2,3
   10744:	3881bb26 	beq	r7,r2,10e34 <__muldf3+0x850>
   10748:	00800044 	movi	r2,1
   1074c:	3881961e 	bne	r7,r2,10da8 <__muldf3+0x7c4>
   10750:	3027883a 	mov	r19,r6
   10754:	0005883a 	mov	r2,zero
   10758:	0021883a 	mov	r16,zero
   1075c:	002d883a 	mov	r22,zero
   10760:	1004953a 	slli	r2,r2,20
   10764:	98c03fcc 	andi	r3,r19,255
   10768:	04400434 	movhi	r17,16
   1076c:	8c7fffc4 	addi	r17,r17,-1
   10770:	180697fa 	slli	r3,r3,31
   10774:	8460703a 	and	r16,r16,r17
   10778:	80a0b03a 	or	r16,r16,r2
   1077c:	80c6b03a 	or	r3,r16,r3
   10780:	b005883a 	mov	r2,r22
   10784:	dfc01117 	ldw	ra,68(sp)
   10788:	df001017 	ldw	fp,64(sp)
   1078c:	ddc00f17 	ldw	r23,60(sp)
   10790:	dd800e17 	ldw	r22,56(sp)
   10794:	dd400d17 	ldw	r21,52(sp)
   10798:	dd000c17 	ldw	r20,48(sp)
   1079c:	dcc00b17 	ldw	r19,44(sp)
   107a0:	dc800a17 	ldw	r18,40(sp)
   107a4:	dc400917 	ldw	r17,36(sp)
   107a8:	dc000817 	ldw	r16,32(sp)
   107ac:	dec01204 	addi	sp,sp,72
   107b0:	f800283a 	ret
   107b4:	2404b03a 	or	r2,r4,r16
   107b8:	202b883a 	mov	r21,r4
   107bc:	10004426 	beq	r2,zero,108d0 <__muldf3+0x2ec>
   107c0:	80015126 	beq	r16,zero,10d08 <__muldf3+0x724>
   107c4:	8009883a 	mov	r4,r16
   107c8:	d9800715 	stw	r6,28(sp)
   107cc:	d9c00215 	stw	r7,8(sp)
   107d0:	da400415 	stw	r9,16(sp)
   107d4:	0010fe00 	call	10fe0 <__clzsi2>
   107d8:	d9800717 	ldw	r6,28(sp)
   107dc:	d9c00217 	ldw	r7,8(sp)
   107e0:	da400417 	ldw	r9,16(sp)
   107e4:	113ffd44 	addi	r4,r2,-11
   107e8:	00c00704 	movi	r3,28
   107ec:	19014216 	blt	r3,r4,10cf8 <__muldf3+0x714>
   107f0:	00c00744 	movi	r3,29
   107f4:	15bffe04 	addi	r22,r2,-8
   107f8:	1907c83a 	sub	r3,r3,r4
   107fc:	85a0983a 	sll	r16,r16,r22
   10800:	a8c6d83a 	srl	r3,r21,r3
   10804:	adac983a 	sll	r22,r21,r22
   10808:	1c20b03a 	or	r16,r3,r16
   1080c:	1080fcc4 	addi	r2,r2,1011
   10810:	00a9c83a 	sub	r20,zero,r2
   10814:	002b883a 	mov	r21,zero
   10818:	000b883a 	mov	r5,zero
   1081c:	003f9006 	br	10660 <__alt_data_end+0xffff0660>
   10820:	3446b03a 	or	r3,r6,r17
   10824:	1800281e 	bne	r3,zero,108c8 <__muldf3+0x2e4>
   10828:	0023883a 	mov	r17,zero
   1082c:	0025883a 	mov	r18,zero
   10830:	01c00084 	movi	r7,2
   10834:	003f9c06 	br	106a8 <__alt_data_end+0xffff06a8>
   10838:	3446b03a 	or	r3,r6,r17
   1083c:	18001e26 	beq	r3,zero,108b8 <__muldf3+0x2d4>
   10840:	88012126 	beq	r17,zero,10cc8 <__muldf3+0x6e4>
   10844:	8809883a 	mov	r4,r17
   10848:	d9400215 	stw	r5,8(sp)
   1084c:	d9800715 	stw	r6,28(sp)
   10850:	da400415 	stw	r9,16(sp)
   10854:	da800315 	stw	r10,12(sp)
   10858:	0010fe00 	call	10fe0 <__clzsi2>
   1085c:	d9400217 	ldw	r5,8(sp)
   10860:	d9800717 	ldw	r6,28(sp)
   10864:	da400417 	ldw	r9,16(sp)
   10868:	da800317 	ldw	r10,12(sp)
   1086c:	113ffd44 	addi	r4,r2,-11
   10870:	00c00704 	movi	r3,28
   10874:	19011016 	blt	r3,r4,10cb8 <__muldf3+0x6d4>
   10878:	00c00744 	movi	r3,29
   1087c:	14bffe04 	addi	r18,r2,-8
   10880:	1907c83a 	sub	r3,r3,r4
   10884:	8ca2983a 	sll	r17,r17,r18
   10888:	30c6d83a 	srl	r3,r6,r3
   1088c:	34a4983a 	sll	r18,r6,r18
   10890:	1c62b03a 	or	r17,r3,r17
   10894:	1080fcc4 	addi	r2,r2,1011
   10898:	0085c83a 	sub	r2,zero,r2
   1089c:	000f883a 	mov	r7,zero
   108a0:	003f8106 	br	106a8 <__alt_data_end+0xffff06a8>
   108a4:	3027883a 	mov	r19,r6
   108a8:	0081ffc4 	movi	r2,2047
   108ac:	0021883a 	mov	r16,zero
   108b0:	002d883a 	mov	r22,zero
   108b4:	003faa06 	br	10760 <__alt_data_end+0xffff0760>
   108b8:	0023883a 	mov	r17,zero
   108bc:	0025883a 	mov	r18,zero
   108c0:	01c00044 	movi	r7,1
   108c4:	003f7806 	br	106a8 <__alt_data_end+0xffff06a8>
   108c8:	01c000c4 	movi	r7,3
   108cc:	003f7606 	br	106a8 <__alt_data_end+0xffff06a8>
   108d0:	05400104 	movi	r21,4
   108d4:	0021883a 	mov	r16,zero
   108d8:	002d883a 	mov	r22,zero
   108dc:	01400044 	movi	r5,1
   108e0:	003f5f06 	br	10660 <__alt_data_end+0xffff0660>
   108e4:	05400304 	movi	r21,12
   108e8:	014000c4 	movi	r5,3
   108ec:	003f5c06 	br	10660 <__alt_data_end+0xffff0660>
   108f0:	04000434 	movhi	r16,16
   108f4:	0027883a 	mov	r19,zero
   108f8:	843fffc4 	addi	r16,r16,-1
   108fc:	05bfffc4 	movi	r22,-1
   10900:	0081ffc4 	movi	r2,2047
   10904:	003f9606 	br	10760 <__alt_data_end+0xffff0760>
   10908:	8023883a 	mov	r17,r16
   1090c:	b025883a 	mov	r18,r22
   10910:	280f883a 	mov	r7,r5
   10914:	003f8806 	br	10738 <__alt_data_end+0xffff0738>
   10918:	8023883a 	mov	r17,r16
   1091c:	b025883a 	mov	r18,r22
   10920:	480d883a 	mov	r6,r9
   10924:	280f883a 	mov	r7,r5
   10928:	003f8306 	br	10738 <__alt_data_end+0xffff0738>
   1092c:	b026d43a 	srli	r19,r22,16
   10930:	902ed43a 	srli	r23,r18,16
   10934:	b5bfffcc 	andi	r22,r22,65535
   10938:	94bfffcc 	andi	r18,r18,65535
   1093c:	b00b883a 	mov	r5,r22
   10940:	9009883a 	mov	r4,r18
   10944:	d8c00515 	stw	r3,20(sp)
   10948:	d9800715 	stw	r6,28(sp)
   1094c:	da000615 	stw	r8,24(sp)
   10950:	00105bc0 	call	105bc <__mulsi3>
   10954:	980b883a 	mov	r5,r19
   10958:	9009883a 	mov	r4,r18
   1095c:	1029883a 	mov	r20,r2
   10960:	00105bc0 	call	105bc <__mulsi3>
   10964:	b80b883a 	mov	r5,r23
   10968:	9809883a 	mov	r4,r19
   1096c:	102b883a 	mov	r21,r2
   10970:	00105bc0 	call	105bc <__mulsi3>
   10974:	b809883a 	mov	r4,r23
   10978:	b00b883a 	mov	r5,r22
   1097c:	1039883a 	mov	fp,r2
   10980:	00105bc0 	call	105bc <__mulsi3>
   10984:	a008d43a 	srli	r4,r20,16
   10988:	1545883a 	add	r2,r2,r21
   1098c:	d8c00517 	ldw	r3,20(sp)
   10990:	2085883a 	add	r2,r4,r2
   10994:	d9800717 	ldw	r6,28(sp)
   10998:	da000617 	ldw	r8,24(sp)
   1099c:	1540022e 	bgeu	r2,r21,109a8 <__muldf3+0x3c4>
   109a0:	01000074 	movhi	r4,1
   109a4:	e139883a 	add	fp,fp,r4
   109a8:	100e943a 	slli	r7,r2,16
   109ac:	1004d43a 	srli	r2,r2,16
   109b0:	882ad43a 	srli	r21,r17,16
   109b4:	a53fffcc 	andi	r20,r20,65535
   109b8:	8c7fffcc 	andi	r17,r17,65535
   109bc:	3d29883a 	add	r20,r7,r20
   109c0:	b00b883a 	mov	r5,r22
   109c4:	8809883a 	mov	r4,r17
   109c8:	d8c00515 	stw	r3,20(sp)
   109cc:	d9800715 	stw	r6,28(sp)
   109d0:	da000615 	stw	r8,24(sp)
   109d4:	dd000115 	stw	r20,4(sp)
   109d8:	d8800015 	stw	r2,0(sp)
   109dc:	00105bc0 	call	105bc <__mulsi3>
   109e0:	980b883a 	mov	r5,r19
   109e4:	8809883a 	mov	r4,r17
   109e8:	d8800215 	stw	r2,8(sp)
   109ec:	00105bc0 	call	105bc <__mulsi3>
   109f0:	9809883a 	mov	r4,r19
   109f4:	a80b883a 	mov	r5,r21
   109f8:	1029883a 	mov	r20,r2
   109fc:	00105bc0 	call	105bc <__mulsi3>
   10a00:	b00b883a 	mov	r5,r22
   10a04:	a809883a 	mov	r4,r21
   10a08:	d8800415 	stw	r2,16(sp)
   10a0c:	00105bc0 	call	105bc <__mulsi3>
   10a10:	d9c00217 	ldw	r7,8(sp)
   10a14:	1505883a 	add	r2,r2,r20
   10a18:	d8c00517 	ldw	r3,20(sp)
   10a1c:	3826d43a 	srli	r19,r7,16
   10a20:	d9800717 	ldw	r6,28(sp)
   10a24:	da000617 	ldw	r8,24(sp)
   10a28:	9885883a 	add	r2,r19,r2
   10a2c:	da400417 	ldw	r9,16(sp)
   10a30:	1500022e 	bgeu	r2,r20,10a3c <__muldf3+0x458>
   10a34:	01000074 	movhi	r4,1
   10a38:	4913883a 	add	r9,r9,r4
   10a3c:	1028d43a 	srli	r20,r2,16
   10a40:	1004943a 	slli	r2,r2,16
   10a44:	802cd43a 	srli	r22,r16,16
   10a48:	843fffcc 	andi	r16,r16,65535
   10a4c:	3cffffcc 	andi	r19,r7,65535
   10a50:	9009883a 	mov	r4,r18
   10a54:	800b883a 	mov	r5,r16
   10a58:	a269883a 	add	r20,r20,r9
   10a5c:	d8c00515 	stw	r3,20(sp)
   10a60:	d9800715 	stw	r6,28(sp)
   10a64:	da000615 	stw	r8,24(sp)
   10a68:	14e7883a 	add	r19,r2,r19
   10a6c:	00105bc0 	call	105bc <__mulsi3>
   10a70:	9009883a 	mov	r4,r18
   10a74:	b00b883a 	mov	r5,r22
   10a78:	d8800315 	stw	r2,12(sp)
   10a7c:	00105bc0 	call	105bc <__mulsi3>
   10a80:	b809883a 	mov	r4,r23
   10a84:	b00b883a 	mov	r5,r22
   10a88:	d8800215 	stw	r2,8(sp)
   10a8c:	00105bc0 	call	105bc <__mulsi3>
   10a90:	b80b883a 	mov	r5,r23
   10a94:	8009883a 	mov	r4,r16
   10a98:	d8800415 	stw	r2,16(sp)
   10a9c:	00105bc0 	call	105bc <__mulsi3>
   10aa0:	da800317 	ldw	r10,12(sp)
   10aa4:	d9c00217 	ldw	r7,8(sp)
   10aa8:	d9000017 	ldw	r4,0(sp)
   10aac:	502ed43a 	srli	r23,r10,16
   10ab0:	11c5883a 	add	r2,r2,r7
   10ab4:	24e5883a 	add	r18,r4,r19
   10ab8:	b885883a 	add	r2,r23,r2
   10abc:	d8c00517 	ldw	r3,20(sp)
   10ac0:	d9800717 	ldw	r6,28(sp)
   10ac4:	da000617 	ldw	r8,24(sp)
   10ac8:	da400417 	ldw	r9,16(sp)
   10acc:	11c0022e 	bgeu	r2,r7,10ad8 <__muldf3+0x4f4>
   10ad0:	01000074 	movhi	r4,1
   10ad4:	4913883a 	add	r9,r9,r4
   10ad8:	100ed43a 	srli	r7,r2,16
   10adc:	1004943a 	slli	r2,r2,16
   10ae0:	55ffffcc 	andi	r23,r10,65535
   10ae4:	3a53883a 	add	r9,r7,r9
   10ae8:	8809883a 	mov	r4,r17
   10aec:	800b883a 	mov	r5,r16
   10af0:	d8c00515 	stw	r3,20(sp)
   10af4:	d9800715 	stw	r6,28(sp)
   10af8:	da000615 	stw	r8,24(sp)
   10afc:	da400415 	stw	r9,16(sp)
   10b00:	15ef883a 	add	r23,r2,r23
   10b04:	00105bc0 	call	105bc <__mulsi3>
   10b08:	8809883a 	mov	r4,r17
   10b0c:	b00b883a 	mov	r5,r22
   10b10:	d8800215 	stw	r2,8(sp)
   10b14:	00105bc0 	call	105bc <__mulsi3>
   10b18:	b00b883a 	mov	r5,r22
   10b1c:	a809883a 	mov	r4,r21
   10b20:	d8800315 	stw	r2,12(sp)
   10b24:	00105bc0 	call	105bc <__mulsi3>
   10b28:	8009883a 	mov	r4,r16
   10b2c:	a80b883a 	mov	r5,r21
   10b30:	1023883a 	mov	r17,r2
   10b34:	00105bc0 	call	105bc <__mulsi3>
   10b38:	d9c00217 	ldw	r7,8(sp)
   10b3c:	da800317 	ldw	r10,12(sp)
   10b40:	d8c00517 	ldw	r3,20(sp)
   10b44:	3808d43a 	srli	r4,r7,16
   10b48:	1285883a 	add	r2,r2,r10
   10b4c:	d9800717 	ldw	r6,28(sp)
   10b50:	2085883a 	add	r2,r4,r2
   10b54:	da000617 	ldw	r8,24(sp)
   10b58:	da400417 	ldw	r9,16(sp)
   10b5c:	1280022e 	bgeu	r2,r10,10b68 <__muldf3+0x584>
   10b60:	01000074 	movhi	r4,1
   10b64:	8923883a 	add	r17,r17,r4
   10b68:	1008943a 	slli	r4,r2,16
   10b6c:	39ffffcc 	andi	r7,r7,65535
   10b70:	e4b9883a 	add	fp,fp,r18
   10b74:	21cf883a 	add	r7,r4,r7
   10b78:	e4e7803a 	cmpltu	r19,fp,r19
   10b7c:	3d0f883a 	add	r7,r7,r20
   10b80:	bf39883a 	add	fp,r23,fp
   10b84:	99c9883a 	add	r4,r19,r7
   10b88:	e5ef803a 	cmpltu	r23,fp,r23
   10b8c:	490b883a 	add	r5,r9,r4
   10b90:	1004d43a 	srli	r2,r2,16
   10b94:	b965883a 	add	r18,r23,r5
   10b98:	24c9803a 	cmpltu	r4,r4,r19
   10b9c:	3d29803a 	cmpltu	r20,r7,r20
   10ba0:	a128b03a 	or	r20,r20,r4
   10ba4:	95ef803a 	cmpltu	r23,r18,r23
   10ba8:	2a53803a 	cmpltu	r9,r5,r9
   10bac:	a0a9883a 	add	r20,r20,r2
   10bb0:	4deeb03a 	or	r23,r9,r23
   10bb4:	a5ef883a 	add	r23,r20,r23
   10bb8:	bc63883a 	add	r17,r23,r17
   10bbc:	e004927a 	slli	r2,fp,9
   10bc0:	d9000117 	ldw	r4,4(sp)
   10bc4:	882e927a 	slli	r23,r17,9
   10bc8:	9022d5fa 	srli	r17,r18,23
   10bcc:	e038d5fa 	srli	fp,fp,23
   10bd0:	1104b03a 	or	r2,r2,r4
   10bd4:	9024927a 	slli	r18,r18,9
   10bd8:	1004c03a 	cmpne	r2,r2,zero
   10bdc:	bc62b03a 	or	r17,r23,r17
   10be0:	1738b03a 	or	fp,r2,fp
   10be4:	8880402c 	andhi	r2,r17,256
   10be8:	e4a4b03a 	or	r18,fp,r18
   10bec:	10000726 	beq	r2,zero,10c0c <__muldf3+0x628>
   10bf0:	9006d07a 	srli	r3,r18,1
   10bf4:	880497fa 	slli	r2,r17,31
   10bf8:	9480004c 	andi	r18,r18,1
   10bfc:	8822d07a 	srli	r17,r17,1
   10c00:	1ca4b03a 	or	r18,r3,r18
   10c04:	14a4b03a 	or	r18,r2,r18
   10c08:	4007883a 	mov	r3,r8
   10c0c:	1880ffc4 	addi	r2,r3,1023
   10c10:	0080460e 	bge	zero,r2,10d2c <__muldf3+0x748>
   10c14:	910001cc 	andi	r4,r18,7
   10c18:	20000726 	beq	r4,zero,10c38 <__muldf3+0x654>
   10c1c:	910003cc 	andi	r4,r18,15
   10c20:	01400104 	movi	r5,4
   10c24:	21400426 	beq	r4,r5,10c38 <__muldf3+0x654>
   10c28:	9149883a 	add	r4,r18,r5
   10c2c:	24a5803a 	cmpltu	r18,r4,r18
   10c30:	8ca3883a 	add	r17,r17,r18
   10c34:	2025883a 	mov	r18,r4
   10c38:	8900402c 	andhi	r4,r17,256
   10c3c:	20000426 	beq	r4,zero,10c50 <__muldf3+0x66c>
   10c40:	18810004 	addi	r2,r3,1024
   10c44:	00ffc034 	movhi	r3,65280
   10c48:	18ffffc4 	addi	r3,r3,-1
   10c4c:	88e2703a 	and	r17,r17,r3
   10c50:	00c1ff84 	movi	r3,2046
   10c54:	18bf1316 	blt	r3,r2,108a4 <__alt_data_end+0xffff08a4>
   10c58:	882c977a 	slli	r22,r17,29
   10c5c:	9024d0fa 	srli	r18,r18,3
   10c60:	8822927a 	slli	r17,r17,9
   10c64:	1081ffcc 	andi	r2,r2,2047
   10c68:	b4acb03a 	or	r22,r22,r18
   10c6c:	8820d33a 	srli	r16,r17,12
   10c70:	3027883a 	mov	r19,r6
   10c74:	003eba06 	br	10760 <__alt_data_end+0xffff0760>
   10c78:	8080022c 	andhi	r2,r16,8
   10c7c:	10000926 	beq	r2,zero,10ca4 <__muldf3+0x6c0>
   10c80:	8880022c 	andhi	r2,r17,8
   10c84:	1000071e 	bne	r2,zero,10ca4 <__muldf3+0x6c0>
   10c88:	00800434 	movhi	r2,16
   10c8c:	8c000234 	orhi	r16,r17,8
   10c90:	10bfffc4 	addi	r2,r2,-1
   10c94:	e027883a 	mov	r19,fp
   10c98:	80a0703a 	and	r16,r16,r2
   10c9c:	902d883a 	mov	r22,r18
   10ca0:	003f1706 	br	10900 <__alt_data_end+0xffff0900>
   10ca4:	00800434 	movhi	r2,16
   10ca8:	84000234 	orhi	r16,r16,8
   10cac:	10bfffc4 	addi	r2,r2,-1
   10cb0:	80a0703a 	and	r16,r16,r2
   10cb4:	003f1206 	br	10900 <__alt_data_end+0xffff0900>
   10cb8:	147ff604 	addi	r17,r2,-40
   10cbc:	3462983a 	sll	r17,r6,r17
   10cc0:	0025883a 	mov	r18,zero
   10cc4:	003ef306 	br	10894 <__alt_data_end+0xffff0894>
   10cc8:	3009883a 	mov	r4,r6
   10ccc:	d9400215 	stw	r5,8(sp)
   10cd0:	d9800715 	stw	r6,28(sp)
   10cd4:	da400415 	stw	r9,16(sp)
   10cd8:	da800315 	stw	r10,12(sp)
   10cdc:	0010fe00 	call	10fe0 <__clzsi2>
   10ce0:	10800804 	addi	r2,r2,32
   10ce4:	da800317 	ldw	r10,12(sp)
   10ce8:	da400417 	ldw	r9,16(sp)
   10cec:	d9800717 	ldw	r6,28(sp)
   10cf0:	d9400217 	ldw	r5,8(sp)
   10cf4:	003edd06 	br	1086c <__alt_data_end+0xffff086c>
   10cf8:	143ff604 	addi	r16,r2,-40
   10cfc:	ac20983a 	sll	r16,r21,r16
   10d00:	002d883a 	mov	r22,zero
   10d04:	003ec106 	br	1080c <__alt_data_end+0xffff080c>
   10d08:	d9800715 	stw	r6,28(sp)
   10d0c:	d9c00215 	stw	r7,8(sp)
   10d10:	da400415 	stw	r9,16(sp)
   10d14:	0010fe00 	call	10fe0 <__clzsi2>
   10d18:	10800804 	addi	r2,r2,32
   10d1c:	da400417 	ldw	r9,16(sp)
   10d20:	d9c00217 	ldw	r7,8(sp)
   10d24:	d9800717 	ldw	r6,28(sp)
   10d28:	003eae06 	br	107e4 <__alt_data_end+0xffff07e4>
   10d2c:	00c00044 	movi	r3,1
   10d30:	1887c83a 	sub	r3,r3,r2
   10d34:	01000e04 	movi	r4,56
   10d38:	20fe8516 	blt	r4,r3,10750 <__alt_data_end+0xffff0750>
   10d3c:	010007c4 	movi	r4,31
   10d40:	20c01b16 	blt	r4,r3,10db0 <__muldf3+0x7cc>
   10d44:	00800804 	movi	r2,32
   10d48:	10c5c83a 	sub	r2,r2,r3
   10d4c:	888a983a 	sll	r5,r17,r2
   10d50:	90c8d83a 	srl	r4,r18,r3
   10d54:	9084983a 	sll	r2,r18,r2
   10d58:	88e2d83a 	srl	r17,r17,r3
   10d5c:	2906b03a 	or	r3,r5,r4
   10d60:	1004c03a 	cmpne	r2,r2,zero
   10d64:	1886b03a 	or	r3,r3,r2
   10d68:	188001cc 	andi	r2,r3,7
   10d6c:	10000726 	beq	r2,zero,10d8c <__muldf3+0x7a8>
   10d70:	188003cc 	andi	r2,r3,15
   10d74:	01000104 	movi	r4,4
   10d78:	11000426 	beq	r2,r4,10d8c <__muldf3+0x7a8>
   10d7c:	1805883a 	mov	r2,r3
   10d80:	10c00104 	addi	r3,r2,4
   10d84:	1885803a 	cmpltu	r2,r3,r2
   10d88:	88a3883a 	add	r17,r17,r2
   10d8c:	8880202c 	andhi	r2,r17,128
   10d90:	10001c26 	beq	r2,zero,10e04 <__muldf3+0x820>
   10d94:	3027883a 	mov	r19,r6
   10d98:	00800044 	movi	r2,1
   10d9c:	0021883a 	mov	r16,zero
   10da0:	002d883a 	mov	r22,zero
   10da4:	003e6e06 	br	10760 <__alt_data_end+0xffff0760>
   10da8:	4007883a 	mov	r3,r8
   10dac:	003f9706 	br	10c0c <__alt_data_end+0xffff0c0c>
   10db0:	017ff844 	movi	r5,-31
   10db4:	2885c83a 	sub	r2,r5,r2
   10db8:	888ad83a 	srl	r5,r17,r2
   10dbc:	00800804 	movi	r2,32
   10dc0:	18801a26 	beq	r3,r2,10e2c <__muldf3+0x848>
   10dc4:	01001004 	movi	r4,64
   10dc8:	20c7c83a 	sub	r3,r4,r3
   10dcc:	88e2983a 	sll	r17,r17,r3
   10dd0:	8ca4b03a 	or	r18,r17,r18
   10dd4:	9004c03a 	cmpne	r2,r18,zero
   10dd8:	2884b03a 	or	r2,r5,r2
   10ddc:	144001cc 	andi	r17,r2,7
   10de0:	88000d1e 	bne	r17,zero,10e18 <__muldf3+0x834>
   10de4:	0021883a 	mov	r16,zero
   10de8:	102cd0fa 	srli	r22,r2,3
   10dec:	3027883a 	mov	r19,r6
   10df0:	0005883a 	mov	r2,zero
   10df4:	b46cb03a 	or	r22,r22,r17
   10df8:	003e5906 	br	10760 <__alt_data_end+0xffff0760>
   10dfc:	1007883a 	mov	r3,r2
   10e00:	0023883a 	mov	r17,zero
   10e04:	8820927a 	slli	r16,r17,9
   10e08:	1805883a 	mov	r2,r3
   10e0c:	8822977a 	slli	r17,r17,29
   10e10:	8020d33a 	srli	r16,r16,12
   10e14:	003ff406 	br	10de8 <__alt_data_end+0xffff0de8>
   10e18:	10c003cc 	andi	r3,r2,15
   10e1c:	01000104 	movi	r4,4
   10e20:	193ff626 	beq	r3,r4,10dfc <__alt_data_end+0xffff0dfc>
   10e24:	0023883a 	mov	r17,zero
   10e28:	003fd506 	br	10d80 <__alt_data_end+0xffff0d80>
   10e2c:	0023883a 	mov	r17,zero
   10e30:	003fe706 	br	10dd0 <__alt_data_end+0xffff0dd0>
   10e34:	00800434 	movhi	r2,16
   10e38:	8c000234 	orhi	r16,r17,8
   10e3c:	10bfffc4 	addi	r2,r2,-1
   10e40:	3027883a 	mov	r19,r6
   10e44:	80a0703a 	and	r16,r16,r2
   10e48:	902d883a 	mov	r22,r18
   10e4c:	003eac06 	br	10900 <__alt_data_end+0xffff0900>

00010e50 <__fixdfsi>:
   10e50:	280cd53a 	srli	r6,r5,20
   10e54:	00c00434 	movhi	r3,16
   10e58:	18ffffc4 	addi	r3,r3,-1
   10e5c:	3181ffcc 	andi	r6,r6,2047
   10e60:	01c0ff84 	movi	r7,1022
   10e64:	28c6703a 	and	r3,r5,r3
   10e68:	280ad7fa 	srli	r5,r5,31
   10e6c:	3980120e 	bge	r7,r6,10eb8 <__fixdfsi+0x68>
   10e70:	00810744 	movi	r2,1053
   10e74:	11800c16 	blt	r2,r6,10ea8 <__fixdfsi+0x58>
   10e78:	00810cc4 	movi	r2,1075
   10e7c:	1185c83a 	sub	r2,r2,r6
   10e80:	01c007c4 	movi	r7,31
   10e84:	18c00434 	orhi	r3,r3,16
   10e88:	38800d16 	blt	r7,r2,10ec0 <__fixdfsi+0x70>
   10e8c:	31befb44 	addi	r6,r6,-1043
   10e90:	2084d83a 	srl	r2,r4,r2
   10e94:	1986983a 	sll	r3,r3,r6
   10e98:	1884b03a 	or	r2,r3,r2
   10e9c:	28000726 	beq	r5,zero,10ebc <__fixdfsi+0x6c>
   10ea0:	0085c83a 	sub	r2,zero,r2
   10ea4:	f800283a 	ret
   10ea8:	00a00034 	movhi	r2,32768
   10eac:	10bfffc4 	addi	r2,r2,-1
   10eb0:	2885883a 	add	r2,r5,r2
   10eb4:	f800283a 	ret
   10eb8:	0005883a 	mov	r2,zero
   10ebc:	f800283a 	ret
   10ec0:	008104c4 	movi	r2,1043
   10ec4:	1185c83a 	sub	r2,r2,r6
   10ec8:	1884d83a 	srl	r2,r3,r2
   10ecc:	003ff306 	br	10e9c <__alt_data_end+0xffff0e9c>

00010ed0 <__extendsfdf2>:
   10ed0:	200ad5fa 	srli	r5,r4,23
   10ed4:	defffd04 	addi	sp,sp,-12
   10ed8:	dc400115 	stw	r17,4(sp)
   10edc:	29403fcc 	andi	r5,r5,255
   10ee0:	29800044 	addi	r6,r5,1
   10ee4:	04402034 	movhi	r17,128
   10ee8:	dc000015 	stw	r16,0(sp)
   10eec:	8c7fffc4 	addi	r17,r17,-1
   10ef0:	dfc00215 	stw	ra,8(sp)
   10ef4:	31803fcc 	andi	r6,r6,255
   10ef8:	00800044 	movi	r2,1
   10efc:	8922703a 	and	r17,r17,r4
   10f00:	2020d7fa 	srli	r16,r4,31
   10f04:	1180110e 	bge	r2,r6,10f4c <__extendsfdf2+0x7c>
   10f08:	880cd0fa 	srli	r6,r17,3
   10f0c:	8822977a 	slli	r17,r17,29
   10f10:	2940e004 	addi	r5,r5,896
   10f14:	2941ffcc 	andi	r5,r5,2047
   10f18:	2804953a 	slli	r2,r5,20
   10f1c:	01400434 	movhi	r5,16
   10f20:	800697fa 	slli	r3,r16,31
   10f24:	297fffc4 	addi	r5,r5,-1
   10f28:	314a703a 	and	r5,r6,r5
   10f2c:	288ab03a 	or	r5,r5,r2
   10f30:	28c6b03a 	or	r3,r5,r3
   10f34:	8805883a 	mov	r2,r17
   10f38:	dfc00217 	ldw	ra,8(sp)
   10f3c:	dc400117 	ldw	r17,4(sp)
   10f40:	dc000017 	ldw	r16,0(sp)
   10f44:	dec00304 	addi	sp,sp,12
   10f48:	f800283a 	ret
   10f4c:	2800111e 	bne	r5,zero,10f94 <__extendsfdf2+0xc4>
   10f50:	88001c26 	beq	r17,zero,10fc4 <__extendsfdf2+0xf4>
   10f54:	8809883a 	mov	r4,r17
   10f58:	0010fe00 	call	10fe0 <__clzsi2>
   10f5c:	00c00284 	movi	r3,10
   10f60:	18801b16 	blt	r3,r2,10fd0 <__extendsfdf2+0x100>
   10f64:	018002c4 	movi	r6,11
   10f68:	308dc83a 	sub	r6,r6,r2
   10f6c:	11000544 	addi	r4,r2,21
   10f70:	8986d83a 	srl	r3,r17,r6
   10f74:	8922983a 	sll	r17,r17,r4
   10f78:	0180e244 	movi	r6,905
   10f7c:	01400434 	movhi	r5,16
   10f80:	3085c83a 	sub	r2,r6,r2
   10f84:	297fffc4 	addi	r5,r5,-1
   10f88:	194c703a 	and	r6,r3,r5
   10f8c:	1141ffcc 	andi	r5,r2,2047
   10f90:	003fe006 	br	10f14 <__alt_data_end+0xffff0f14>
   10f94:	88000826 	beq	r17,zero,10fb8 <__extendsfdf2+0xe8>
   10f98:	880cd0fa 	srli	r6,r17,3
   10f9c:	00800434 	movhi	r2,16
   10fa0:	10bfffc4 	addi	r2,r2,-1
   10fa4:	31800234 	orhi	r6,r6,8
   10fa8:	8822977a 	slli	r17,r17,29
   10fac:	308c703a 	and	r6,r6,r2
   10fb0:	0141ffc4 	movi	r5,2047
   10fb4:	003fd706 	br	10f14 <__alt_data_end+0xffff0f14>
   10fb8:	0141ffc4 	movi	r5,2047
   10fbc:	000d883a 	mov	r6,zero
   10fc0:	003fd406 	br	10f14 <__alt_data_end+0xffff0f14>
   10fc4:	000b883a 	mov	r5,zero
   10fc8:	000d883a 	mov	r6,zero
   10fcc:	003fd106 	br	10f14 <__alt_data_end+0xffff0f14>
   10fd0:	11bffd44 	addi	r6,r2,-11
   10fd4:	8986983a 	sll	r3,r17,r6
   10fd8:	0023883a 	mov	r17,zero
   10fdc:	003fe606 	br	10f78 <__alt_data_end+0xffff0f78>

00010fe0 <__clzsi2>:
   10fe0:	00bfffd4 	movui	r2,65535
   10fe4:	11000536 	bltu	r2,r4,10ffc <__clzsi2+0x1c>
   10fe8:	00803fc4 	movi	r2,255
   10fec:	11000f36 	bltu	r2,r4,1102c <__clzsi2+0x4c>
   10ff0:	00800804 	movi	r2,32
   10ff4:	0007883a 	mov	r3,zero
   10ff8:	00000506 	br	11010 <__clzsi2+0x30>
   10ffc:	00804034 	movhi	r2,256
   11000:	10bfffc4 	addi	r2,r2,-1
   11004:	11000c2e 	bgeu	r2,r4,11038 <__clzsi2+0x58>
   11008:	00800204 	movi	r2,8
   1100c:	00c00604 	movi	r3,24
   11010:	20c8d83a 	srl	r4,r4,r3
   11014:	00c00074 	movhi	r3,1
   11018:	18c66104 	addi	r3,r3,6532
   1101c:	1909883a 	add	r4,r3,r4
   11020:	20c00003 	ldbu	r3,0(r4)
   11024:	10c5c83a 	sub	r2,r2,r3
   11028:	f800283a 	ret
   1102c:	00800604 	movi	r2,24
   11030:	00c00204 	movi	r3,8
   11034:	003ff606 	br	11010 <__alt_data_end+0xffff1010>
   11038:	00800404 	movi	r2,16
   1103c:	1007883a 	mov	r3,r2
   11040:	003ff306 	br	11010 <__alt_data_end+0xffff1010>

00011044 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11044:	008007c4 	movi	r2,31
   11048:	11002136 	bltu	r2,r4,110d0 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1104c:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11050:	00ffff84 	movi	r3,-2
   11054:	38c4703a 	and	r2,r7,r3
   11058:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   1105c:	200490fa 	slli	r2,r4,3
   11060:	02000074 	movhi	r8,1
   11064:	42076f04 	addi	r8,r8,7612
   11068:	4085883a 	add	r2,r8,r2
   1106c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   11070:	11400115 	stw	r5,4(r2)
   11074:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   11078:	30000726 	beq	r6,zero,11098 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1107c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11080:	28c6703a 	and	r3,r5,r3
   11084:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   11088:	d0e05017 	ldw	r3,-32448(gp)
   1108c:	1104983a 	sll	r2,r2,r4
   11090:	10c4b03a 	or	r2,r2,r3
   11094:	00000706 	br	110b4 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11098:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1109c:	28c6703a 	and	r3,r5,r3
   110a0:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   110a4:	1104983a 	sll	r2,r2,r4
   110a8:	d0e05017 	ldw	r3,-32448(gp)
   110ac:	0084303a 	nor	r2,zero,r2
   110b0:	10c4703a 	and	r2,r2,r3
   110b4:	d0a05015 	stw	r2,-32448(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   110b8:	d0a05017 	ldw	r2,-32448(gp)
   110bc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   110c0:	2801703a 	wrctl	status,r5
   110c4:	3801703a 	wrctl	status,r7
   110c8:	0005883a 	mov	r2,zero
   110cc:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   110d0:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   110d4:	f800283a 	ret

000110d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   110d8:	deffff04 	addi	sp,sp,-4
   110dc:	01000074 	movhi	r4,1
   110e0:	01400074 	movhi	r5,1
   110e4:	dfc00015 	stw	ra,0(sp)
   110e8:	2106a404 	addi	r4,r4,6800
   110ec:	2946e904 	addi	r5,r5,7076

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   110f0:	2140061e 	bne	r4,r5,1110c <alt_load+0x34>
   110f4:	01000074 	movhi	r4,1
   110f8:	01400074 	movhi	r5,1
   110fc:	21000804 	addi	r4,r4,32
   11100:	29400804 	addi	r5,r5,32
   11104:	2140121e 	bne	r4,r5,11150 <alt_load+0x78>
   11108:	00000b06 	br	11138 <alt_load+0x60>
   1110c:	00c00074 	movhi	r3,1
   11110:	18c6e904 	addi	r3,r3,7076
   11114:	1907c83a 	sub	r3,r3,r4
   11118:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1111c:	10fff526 	beq	r2,r3,110f4 <__alt_data_end+0xffff10f4>
    {
      *to++ = *from++;
   11120:	114f883a 	add	r7,r2,r5
   11124:	39c00017 	ldw	r7,0(r7)
   11128:	110d883a 	add	r6,r2,r4
   1112c:	10800104 	addi	r2,r2,4
   11130:	31c00015 	stw	r7,0(r6)
   11134:	003ff906 	br	1111c <__alt_data_end+0xffff111c>
   11138:	01000074 	movhi	r4,1
   1113c:	01400074 	movhi	r5,1
   11140:	21065604 	addi	r4,r4,6488
   11144:	29465604 	addi	r5,r5,6488

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11148:	2140101e 	bne	r4,r5,1118c <alt_load+0xb4>
   1114c:	00000b06 	br	1117c <alt_load+0xa4>
   11150:	00c00074 	movhi	r3,1
   11154:	18c06004 	addi	r3,r3,384
   11158:	1907c83a 	sub	r3,r3,r4
   1115c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11160:	10fff526 	beq	r2,r3,11138 <__alt_data_end+0xffff1138>
    {
      *to++ = *from++;
   11164:	114f883a 	add	r7,r2,r5
   11168:	39c00017 	ldw	r7,0(r7)
   1116c:	110d883a 	add	r6,r2,r4
   11170:	10800104 	addi	r2,r2,4
   11174:	31c00015 	stw	r7,0(r6)
   11178:	003ff906 	br	11160 <__alt_data_end+0xffff1160>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1117c:	00115ec0 	call	115ec <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   11180:	dfc00017 	ldw	ra,0(sp)
   11184:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   11188:	00116d81 	jmpi	116d8 <alt_icache_flush_all>
   1118c:	00c00074 	movhi	r3,1
   11190:	18c6a404 	addi	r3,r3,6800
   11194:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11198:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1119c:	18bff726 	beq	r3,r2,1117c <__alt_data_end+0xffff117c>
    {
      *to++ = *from++;
   111a0:	114f883a 	add	r7,r2,r5
   111a4:	39c00017 	ldw	r7,0(r7)
   111a8:	110d883a 	add	r6,r2,r4
   111ac:	10800104 	addi	r2,r2,4
   111b0:	31c00015 	stw	r7,0(r6)
   111b4:	003ff906 	br	1119c <__alt_data_end+0xffff119c>

000111b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   111b8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   111bc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   111c0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   111c4:	00113a00 	call	113a0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   111c8:	00113c00 	call	113c0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   111cc:	d1a05117 	ldw	r6,-32444(gp)
   111d0:	d1605217 	ldw	r5,-32440(gp)
   111d4:	d1205317 	ldw	r4,-32436(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   111d8:	dfc00017 	ldw	ra,0(sp)
   111dc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   111e0:	00104201 	jmpi	10420 <main>

000111e4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   111e4:	defff204 	addi	sp,sp,-56
   111e8:	2005883a 	mov	r2,r4
   111ec:	dfc00a15 	stw	ra,40(sp)
   111f0:	df000915 	stw	fp,36(sp)
   111f4:	ddc00815 	stw	r23,32(sp)
   111f8:	dd800715 	stw	r22,28(sp)
   111fc:	dd400615 	stw	r21,24(sp)
   11200:	dd000515 	stw	r20,20(sp)
   11204:	dcc00415 	stw	r19,16(sp)
   11208:	dc800315 	stw	r18,12(sp)
   1120c:	dc400215 	stw	r17,8(sp)
   11210:	dc000115 	stw	r16,4(sp)
   11214:	d9400b15 	stw	r5,44(sp)
   11218:	d9800c15 	stw	r6,48(sp)
   1121c:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   11220:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   11224:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   11228:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   1122c:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   11230:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   11234:	11000007 	ldb	r4,0(r2)
   11238:	20003a26 	beq	r4,zero,11324 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   1123c:	24000226 	beq	r4,r16,11248 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   11240:	14400044 	addi	r17,r2,1
   11244:	00001406 	br	11298 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   11248:	14400084 	addi	r17,r2,2
   1124c:	10800047 	ldb	r2,1(r2)
   11250:	10003426 	beq	r2,zero,11324 <alt_printf+0x140>
            {
                if (c == '%')
   11254:	1400021e 	bne	r2,r16,11260 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   11258:	8009883a 	mov	r4,r16
   1125c:	00000e06 	br	11298 <alt_printf+0xb4>
                } 
                else if (c == 'c')
   11260:	1480051e 	bne	r2,r18,11278 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   11264:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   11268:	ad800104 	addi	r22,r21,4
   1126c:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   11270:	00113540 	call	11354 <alt_putchar>
   11274:	00002906 	br	1131c <alt_printf+0x138>
                }
                else if (c == 'x')
   11278:	14c0201e 	bne	r2,r19,112fc <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   1127c:	adc00017 	ldw	r23,0(r21)
   11280:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   11284:	b8000326 	beq	r23,zero,11294 <alt_printf+0xb0>
   11288:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   1128c:	00c003c4 	movi	r3,15
   11290:	00000306 	br	112a0 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   11294:	01000c04 	movi	r4,48
   11298:	00113540 	call	11354 <alt_putchar>
                        continue;
   1129c:	00001f06 	br	1131c <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   112a0:	1d84983a 	sll	r2,r3,r22
   112a4:	15c4703a 	and	r2,r2,r23
   112a8:	1000021e 	bne	r2,zero,112b4 <alt_printf+0xd0>
                        digit_shift -= 4;
   112ac:	b5bfff04 	addi	r22,r22,-4
   112b0:	003ffb06 	br	112a0 <__alt_data_end+0xffff12a0>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   112b4:	070003c4 	movi	fp,15
                        if (digit <= 9)
   112b8:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   112bc:	b0001716 	blt	r22,zero,1131c <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   112c0:	e588983a 	sll	r4,fp,r22
   112c4:	25c8703a 	and	r4,r4,r23
   112c8:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   112cc:	19000236 	bltu	r3,r4,112d8 <alt_printf+0xf4>
                            c = '0' + digit;
   112d0:	21000c04 	addi	r4,r4,48
   112d4:	00000106 	br	112dc <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   112d8:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   112dc:	21003fcc 	andi	r4,r4,255
   112e0:	2100201c 	xori	r4,r4,128
   112e4:	213fe004 	addi	r4,r4,-128
   112e8:	d8c00015 	stw	r3,0(sp)
   112ec:	00113540 	call	11354 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   112f0:	b5bfff04 	addi	r22,r22,-4
   112f4:	d8c00017 	ldw	r3,0(sp)
   112f8:	003ff006 	br	112bc <__alt_data_end+0xffff12bc>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   112fc:	1500071e 	bne	r2,r20,1131c <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   11300:	ad800017 	ldw	r22,0(r21)
   11304:	ad400104 	addi	r21,r21,4

                    while(*s)
   11308:	b1000007 	ldb	r4,0(r22)
   1130c:	20000326 	beq	r4,zero,1131c <alt_printf+0x138>
                      alt_putchar(*s++);
   11310:	b5800044 	addi	r22,r22,1
   11314:	00113540 	call	11354 <alt_putchar>
   11318:	003ffb06 	br	11308 <__alt_data_end+0xffff1308>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   1131c:	8805883a 	mov	r2,r17
   11320:	003fc406 	br	11234 <__alt_data_end+0xffff1234>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   11324:	dfc00a17 	ldw	ra,40(sp)
   11328:	df000917 	ldw	fp,36(sp)
   1132c:	ddc00817 	ldw	r23,32(sp)
   11330:	dd800717 	ldw	r22,28(sp)
   11334:	dd400617 	ldw	r21,24(sp)
   11338:	dd000517 	ldw	r20,20(sp)
   1133c:	dcc00417 	ldw	r19,16(sp)
   11340:	dc800317 	ldw	r18,12(sp)
   11344:	dc400217 	ldw	r17,8(sp)
   11348:	dc000117 	ldw	r16,4(sp)
   1134c:	dec00e04 	addi	sp,sp,56
   11350:	f800283a 	ret

00011354 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   11354:	defffd04 	addi	sp,sp,-12
   11358:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   1135c:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   11360:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   11364:	01000074 	movhi	r4,1
   11368:	000f883a 	mov	r7,zero
   1136c:	01800044 	movi	r6,1
   11370:	d80b883a 	mov	r5,sp
   11374:	2106e204 	addi	r4,r4,7048
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   11378:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   1137c:	00113d00 	call	113d0 <altera_avalon_jtag_uart_write>
   11380:	00ffffc4 	movi	r3,-1
   11384:	10c00126 	beq	r2,r3,1138c <alt_putchar+0x38>
        return -1;
    }
    return c;
   11388:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   1138c:	dfc00217 	ldw	ra,8(sp)
   11390:	dc000117 	ldw	r16,4(sp)
   11394:	dec00304 	addi	sp,sp,12
   11398:	f800283a 	ret

0001139c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   1139c:	00115641 	jmpi	11564 <alt_busy_sleep>

000113a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   113a0:	deffff04 	addi	sp,sp,-4
   113a4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   113a8:	00116dc0 	call	116dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   113ac:	00800044 	movi	r2,1
   113b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   113b4:	dfc00017 	ldw	ra,0(sp)
   113b8:	dec00104 	addi	sp,sp,4
   113bc:	f800283a 	ret

000113c0 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   113c0:	01000074 	movhi	r4,1
   113c4:	d1600304 	addi	r5,gp,-32756
   113c8:	2106c004 	addi	r4,r4,6912
   113cc:	00115f81 	jmpi	115f8 <alt_dev_llist_insert>

000113d0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   113d0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   113d4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   113d8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   113dc:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   113e0:	2980072e 	bgeu	r5,r6,11400 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   113e4:	38c00037 	ldwio	r3,0(r7)
   113e8:	18ffffec 	andhi	r3,r3,65535
   113ec:	183ffc26 	beq	r3,zero,113e0 <__alt_data_end+0xffff13e0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   113f0:	28c00007 	ldb	r3,0(r5)
   113f4:	20c00035 	stwio	r3,0(r4)
   113f8:	29400044 	addi	r5,r5,1
   113fc:	003ff806 	br	113e0 <__alt_data_end+0xffff13e0>

  return count;
}
   11400:	f800283a 	ret

00011404 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   11404:	d1600304 	addi	r5,gp,-32756
   11408:	00116641 	jmpi	11664 <alt_find_dev>

0001140c <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   1140c:	20800a17 	ldw	r2,40(r4)
   11410:	10800023 	ldbuio	r2,0(r2)
   11414:	28800005 	stb	r2,0(r5)

	return 0;
}
   11418:	0005883a 	mov	r2,zero
   1141c:	f800283a 	ret

00011420 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11420:	20800a17 	ldw	r2,40(r4)
   11424:	29400fcc 	andi	r5,r5,63
   11428:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1142c:	20800a17 	ldw	r2,40(r4)
   11430:	10800063 	ldbuio	r2,1(r2)
   11434:	30800005 	stb	r2,0(r6)

	return 0;
}
   11438:	0005883a 	mov	r2,zero
   1143c:	f800283a 	ret

00011440 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11440:	20800a17 	ldw	r2,40(r4)
   11444:	29400fcc 	andi	r5,r5,63
   11448:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   1144c:	20800a17 	ldw	r2,40(r4)
   11450:	11800065 	stbio	r6,1(r2)

	return 0;
}
   11454:	0005883a 	mov	r2,zero
   11458:	f800283a 	ret

0001145c <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1145c:	20800a17 	ldw	r2,40(r4)
   11460:	00c00c84 	movi	r3,50
   11464:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11468:	20800a17 	ldw	r2,40(r4)
   1146c:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11470:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11474:	10803fcc 	andi	r2,r2,255
   11478:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1147c:	20800a17 	ldw	r2,40(r4)
   11480:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11484:	20800a17 	ldw	r2,40(r4)
   11488:	10800063 	ldbuio	r2,1(r2)
   1148c:	10803fcc 	andi	r2,r2,255
   11490:	1006923a 	slli	r3,r2,8
   11494:	28800017 	ldw	r2,0(r5)
   11498:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   1149c:	10e0000c 	andi	r3,r2,32768
   114a0:	18000126 	beq	r3,zero,114a8 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   114a4:	10bffff4 	orhi	r2,r2,65535
   114a8:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   114ac:	0005883a 	mov	r2,zero
   114b0:	f800283a 	ret

000114b4 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   114b4:	20800a17 	ldw	r2,40(r4)
   114b8:	00c00d04 	movi	r3,52
   114bc:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   114c0:	20800a17 	ldw	r2,40(r4)
   114c4:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   114c8:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   114cc:	10803fcc 	andi	r2,r2,255
   114d0:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   114d4:	20800a17 	ldw	r2,40(r4)
   114d8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   114dc:	20800a17 	ldw	r2,40(r4)
   114e0:	10800063 	ldbuio	r2,1(r2)
   114e4:	10803fcc 	andi	r2,r2,255
   114e8:	1006923a 	slli	r3,r2,8
   114ec:	28800017 	ldw	r2,0(r5)
   114f0:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   114f4:	10e0000c 	andi	r3,r2,32768
   114f8:	18000126 	beq	r3,zero,11500 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   114fc:	10bffff4 	orhi	r2,r2,65535
   11500:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11504:	0005883a 	mov	r2,zero
   11508:	f800283a 	ret

0001150c <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1150c:	20800a17 	ldw	r2,40(r4)
   11510:	00c00d84 	movi	r3,54
   11514:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11518:	20800a17 	ldw	r2,40(r4)
   1151c:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11520:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11524:	10803fcc 	andi	r2,r2,255
   11528:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1152c:	20800a17 	ldw	r2,40(r4)
   11530:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11534:	20800a17 	ldw	r2,40(r4)
   11538:	10800063 	ldbuio	r2,1(r2)
   1153c:	10803fcc 	andi	r2,r2,255
   11540:	1006923a 	slli	r3,r2,8
   11544:	28800017 	ldw	r2,0(r5)
   11548:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   1154c:	10e0000c 	andi	r3,r2,32768
   11550:	18000126 	beq	r3,zero,11558 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   11554:	10bffff4 	orhi	r2,r2,65535
   11558:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   1155c:	0005883a 	mov	r2,zero
   11560:	f800283a 	ret

00011564 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11564:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11568:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1156c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11570:	dc000015 	stw	r16,0(sp)
   11574:	dfc00115 	stw	ra,4(sp)
   11578:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1157c:	001189c0 	call	1189c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   11580:	10001026 	beq	r2,zero,115c4 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11584:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11588:	013999b4 	movhi	r4,58982
   1158c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11590:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11594:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11598:	297fffc4 	addi	r5,r5,-1
   1159c:	283ffe1e 	bne	r5,zero,11598 <__alt_data_end+0xffff1598>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   115a0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   115a4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   115a8:	18bffb16 	blt	r3,r2,11598 <__alt_data_end+0xffff1598>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   115ac:	01400144 	movi	r5,5
   115b0:	8009883a 	mov	r4,r16
   115b4:	00105bc0 	call	105bc <__mulsi3>
   115b8:	10bfffc4 	addi	r2,r2,-1
   115bc:	103ffe1e 	bne	r2,zero,115b8 <__alt_data_end+0xffff15b8>
   115c0:	00000506 	br	115d8 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   115c4:	01400144 	movi	r5,5
   115c8:	8009883a 	mov	r4,r16
   115cc:	00105bc0 	call	105bc <__mulsi3>
   115d0:	10bfffc4 	addi	r2,r2,-1
   115d4:	00bffe16 	blt	zero,r2,115d0 <__alt_data_end+0xffff15d0>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   115d8:	0005883a 	mov	r2,zero
   115dc:	dfc00117 	ldw	ra,4(sp)
   115e0:	dc000017 	ldw	r16,0(sp)
   115e4:	dec00204 	addi	sp,sp,8
   115e8:	f800283a 	ret

000115ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   115ec:	f800283a 	ret

000115f0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   115f0:	3005883a 	mov	r2,r6
   115f4:	f800283a 	ret

000115f8 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   115f8:	20000226 	beq	r4,zero,11604 <alt_dev_llist_insert+0xc>
   115fc:	20800217 	ldw	r2,8(r4)
   11600:	1000101e 	bne	r2,zero,11644 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11604:	d0a00717 	ldw	r2,-32740(gp)
   11608:	10000926 	beq	r2,zero,11630 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1160c:	deffff04 	addi	sp,sp,-4
   11610:	dfc00015 	stw	ra,0(sp)
   11614:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11618:	00c00584 	movi	r3,22
   1161c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11620:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11624:	dfc00017 	ldw	ra,0(sp)
   11628:	dec00104 	addi	sp,sp,4
   1162c:	f800283a 	ret
   11630:	d0a05504 	addi	r2,gp,-32428
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11634:	00c00584 	movi	r3,22
   11638:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1163c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11640:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   11644:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11648:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   1164c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   11650:	28800017 	ldw	r2,0(r5)
   11654:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   11658:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   1165c:	0005883a 	mov	r2,zero
   11660:	f800283a 	ret

00011664 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11664:	defffb04 	addi	sp,sp,-20
   11668:	dcc00315 	stw	r19,12(sp)
   1166c:	dc800215 	stw	r18,8(sp)
   11670:	dc400115 	stw	r17,4(sp)
   11674:	dc000015 	stw	r16,0(sp)
   11678:	dfc00415 	stw	ra,16(sp)
   1167c:	2027883a 	mov	r19,r4
   11680:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   11684:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   11688:	00117880 	call	11788 <strlen>
   1168c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11690:	84400726 	beq	r16,r17,116b0 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11694:	81000217 	ldw	r4,8(r16)
   11698:	900d883a 	mov	r6,r18
   1169c:	980b883a 	mov	r5,r19
   116a0:	00117580 	call	11758 <memcmp>
   116a4:	10000426 	beq	r2,zero,116b8 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   116a8:	84000017 	ldw	r16,0(r16)
   116ac:	003ff806 	br	11690 <__alt_data_end+0xffff1690>
  }
  
  /* No match found */
  
  return NULL;
   116b0:	0005883a 	mov	r2,zero
   116b4:	00000106 	br	116bc <alt_find_dev+0x58>
   116b8:	8005883a 	mov	r2,r16
}
   116bc:	dfc00417 	ldw	ra,16(sp)
   116c0:	dcc00317 	ldw	r19,12(sp)
   116c4:	dc800217 	ldw	r18,8(sp)
   116c8:	dc400117 	ldw	r17,4(sp)
   116cc:	dc000017 	ldw	r16,0(sp)
   116d0:	dec00504 	addi	sp,sp,20
   116d4:	f800283a 	ret

000116d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   116d8:	f800283a 	ret

000116dc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   116dc:	000170fa 	wrctl	ienable,zero
   116e0:	f800283a 	ret

000116e4 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   116e4:	213ffe84 	addi	r4,r4,-6
   116e8:	008003c4 	movi	r2,15
   116ec:	11001636 	bltu	r2,r4,11748 <alt_exception_cause_generated_bad_addr+0x64>
   116f0:	200890ba 	slli	r4,r4,2
   116f4:	00800074 	movhi	r2,1
   116f8:	1085c204 	addi	r2,r2,5896
   116fc:	2089883a 	add	r4,r4,r2
   11700:	20800017 	ldw	r2,0(r4)
   11704:	1000683a 	jmp	r2
   11708:	00011750 	cmplti	zero,zero,1117
   1170c:	00011750 	cmplti	zero,zero,1117
   11710:	00011748 	cmpgei	zero,zero,1117
   11714:	00011748 	cmpgei	zero,zero,1117
   11718:	00011748 	cmpgei	zero,zero,1117
   1171c:	00011750 	cmplti	zero,zero,1117
   11720:	00011748 	cmpgei	zero,zero,1117
   11724:	00011748 	cmpgei	zero,zero,1117
   11728:	00011750 	cmplti	zero,zero,1117
   1172c:	00011750 	cmplti	zero,zero,1117
   11730:	00011748 	cmpgei	zero,zero,1117
   11734:	00011750 	cmplti	zero,zero,1117
   11738:	00011748 	cmpgei	zero,zero,1117
   1173c:	00011748 	cmpgei	zero,zero,1117
   11740:	00011748 	cmpgei	zero,zero,1117
   11744:	00011750 	cmplti	zero,zero,1117
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11748:	0005883a 	mov	r2,zero
   1174c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11750:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   11754:	f800283a 	ret

00011758 <memcmp>:
   11758:	218d883a 	add	r6,r4,r6
   1175c:	21800826 	beq	r4,r6,11780 <memcmp+0x28>
   11760:	20800003 	ldbu	r2,0(r4)
   11764:	28c00003 	ldbu	r3,0(r5)
   11768:	10c00226 	beq	r2,r3,11774 <memcmp+0x1c>
   1176c:	10c5c83a 	sub	r2,r2,r3
   11770:	f800283a 	ret
   11774:	21000044 	addi	r4,r4,1
   11778:	29400044 	addi	r5,r5,1
   1177c:	003ff706 	br	1175c <__alt_data_end+0xffff175c>
   11780:	0005883a 	mov	r2,zero
   11784:	f800283a 	ret

00011788 <strlen>:
   11788:	2005883a 	mov	r2,r4
   1178c:	10c00007 	ldb	r3,0(r2)
   11790:	18000226 	beq	r3,zero,1179c <strlen+0x14>
   11794:	10800044 	addi	r2,r2,1
   11798:	003ffc06 	br	1178c <__alt_data_end+0xffff178c>
   1179c:	1105c83a 	sub	r2,r2,r4
   117a0:	f800283a 	ret

000117a4 <__divsi3>:
   117a4:	20001b16 	blt	r4,zero,11814 <__divsi3+0x70>
   117a8:	000f883a 	mov	r7,zero
   117ac:	28001616 	blt	r5,zero,11808 <__divsi3+0x64>
   117b0:	200d883a 	mov	r6,r4
   117b4:	29001a2e 	bgeu	r5,r4,11820 <__divsi3+0x7c>
   117b8:	00800804 	movi	r2,32
   117bc:	00c00044 	movi	r3,1
   117c0:	00000106 	br	117c8 <__divsi3+0x24>
   117c4:	10000d26 	beq	r2,zero,117fc <__divsi3+0x58>
   117c8:	294b883a 	add	r5,r5,r5
   117cc:	10bfffc4 	addi	r2,r2,-1
   117d0:	18c7883a 	add	r3,r3,r3
   117d4:	293ffb36 	bltu	r5,r4,117c4 <__alt_data_end+0xffff17c4>
   117d8:	0005883a 	mov	r2,zero
   117dc:	18000726 	beq	r3,zero,117fc <__divsi3+0x58>
   117e0:	0005883a 	mov	r2,zero
   117e4:	31400236 	bltu	r6,r5,117f0 <__divsi3+0x4c>
   117e8:	314dc83a 	sub	r6,r6,r5
   117ec:	10c4b03a 	or	r2,r2,r3
   117f0:	1806d07a 	srli	r3,r3,1
   117f4:	280ad07a 	srli	r5,r5,1
   117f8:	183ffa1e 	bne	r3,zero,117e4 <__alt_data_end+0xffff17e4>
   117fc:	38000126 	beq	r7,zero,11804 <__divsi3+0x60>
   11800:	0085c83a 	sub	r2,zero,r2
   11804:	f800283a 	ret
   11808:	014bc83a 	sub	r5,zero,r5
   1180c:	39c0005c 	xori	r7,r7,1
   11810:	003fe706 	br	117b0 <__alt_data_end+0xffff17b0>
   11814:	0109c83a 	sub	r4,zero,r4
   11818:	01c00044 	movi	r7,1
   1181c:	003fe306 	br	117ac <__alt_data_end+0xffff17ac>
   11820:	00c00044 	movi	r3,1
   11824:	003fee06 	br	117e0 <__alt_data_end+0xffff17e0>

00011828 <__modsi3>:
   11828:	20001716 	blt	r4,zero,11888 <__modsi3+0x60>
   1182c:	000f883a 	mov	r7,zero
   11830:	2005883a 	mov	r2,r4
   11834:	28001216 	blt	r5,zero,11880 <__modsi3+0x58>
   11838:	2900162e 	bgeu	r5,r4,11894 <__modsi3+0x6c>
   1183c:	01800804 	movi	r6,32
   11840:	00c00044 	movi	r3,1
   11844:	00000106 	br	1184c <__modsi3+0x24>
   11848:	30000a26 	beq	r6,zero,11874 <__modsi3+0x4c>
   1184c:	294b883a 	add	r5,r5,r5
   11850:	31bfffc4 	addi	r6,r6,-1
   11854:	18c7883a 	add	r3,r3,r3
   11858:	293ffb36 	bltu	r5,r4,11848 <__alt_data_end+0xffff1848>
   1185c:	18000526 	beq	r3,zero,11874 <__modsi3+0x4c>
   11860:	1806d07a 	srli	r3,r3,1
   11864:	11400136 	bltu	r2,r5,1186c <__modsi3+0x44>
   11868:	1145c83a 	sub	r2,r2,r5
   1186c:	280ad07a 	srli	r5,r5,1
   11870:	183ffb1e 	bne	r3,zero,11860 <__alt_data_end+0xffff1860>
   11874:	38000126 	beq	r7,zero,1187c <__modsi3+0x54>
   11878:	0085c83a 	sub	r2,zero,r2
   1187c:	f800283a 	ret
   11880:	014bc83a 	sub	r5,zero,r5
   11884:	003fec06 	br	11838 <__alt_data_end+0xffff1838>
   11888:	0109c83a 	sub	r4,zero,r4
   1188c:	01c00044 	movi	r7,1
   11890:	003fe706 	br	11830 <__alt_data_end+0xffff1830>
   11894:	00c00044 	movi	r3,1
   11898:	003ff106 	br	11860 <__alt_data_end+0xffff1860>

0001189c <__udivsi3>:
   1189c:	200d883a 	mov	r6,r4
   118a0:	2900152e 	bgeu	r5,r4,118f8 <__udivsi3+0x5c>
   118a4:	28001416 	blt	r5,zero,118f8 <__udivsi3+0x5c>
   118a8:	00800804 	movi	r2,32
   118ac:	00c00044 	movi	r3,1
   118b0:	00000206 	br	118bc <__udivsi3+0x20>
   118b4:	10000e26 	beq	r2,zero,118f0 <__udivsi3+0x54>
   118b8:	28000516 	blt	r5,zero,118d0 <__udivsi3+0x34>
   118bc:	294b883a 	add	r5,r5,r5
   118c0:	10bfffc4 	addi	r2,r2,-1
   118c4:	18c7883a 	add	r3,r3,r3
   118c8:	293ffa36 	bltu	r5,r4,118b4 <__alt_data_end+0xffff18b4>
   118cc:	18000826 	beq	r3,zero,118f0 <__udivsi3+0x54>
   118d0:	0005883a 	mov	r2,zero
   118d4:	31400236 	bltu	r6,r5,118e0 <__udivsi3+0x44>
   118d8:	314dc83a 	sub	r6,r6,r5
   118dc:	10c4b03a 	or	r2,r2,r3
   118e0:	1806d07a 	srli	r3,r3,1
   118e4:	280ad07a 	srli	r5,r5,1
   118e8:	183ffa1e 	bne	r3,zero,118d4 <__alt_data_end+0xffff18d4>
   118ec:	f800283a 	ret
   118f0:	0005883a 	mov	r2,zero
   118f4:	f800283a 	ret
   118f8:	00c00044 	movi	r3,1
   118fc:	003ff406 	br	118d0 <__alt_data_end+0xffff18d0>

00011900 <__umodsi3>:
   11900:	2005883a 	mov	r2,r4
   11904:	2900122e 	bgeu	r5,r4,11950 <__umodsi3+0x50>
   11908:	28001116 	blt	r5,zero,11950 <__umodsi3+0x50>
   1190c:	01800804 	movi	r6,32
   11910:	00c00044 	movi	r3,1
   11914:	00000206 	br	11920 <__umodsi3+0x20>
   11918:	30000c26 	beq	r6,zero,1194c <__umodsi3+0x4c>
   1191c:	28000516 	blt	r5,zero,11934 <__umodsi3+0x34>
   11920:	294b883a 	add	r5,r5,r5
   11924:	31bfffc4 	addi	r6,r6,-1
   11928:	18c7883a 	add	r3,r3,r3
   1192c:	293ffa36 	bltu	r5,r4,11918 <__alt_data_end+0xffff1918>
   11930:	18000626 	beq	r3,zero,1194c <__umodsi3+0x4c>
   11934:	1806d07a 	srli	r3,r3,1
   11938:	11400136 	bltu	r2,r5,11940 <__umodsi3+0x40>
   1193c:	1145c83a 	sub	r2,r2,r5
   11940:	280ad07a 	srli	r5,r5,1
   11944:	183ffb1e 	bne	r3,zero,11934 <__alt_data_end+0xffff1934>
   11948:	f800283a 	ret
   1194c:	f800283a 	ret
   11950:	00c00044 	movi	r3,1
   11954:	003ff706 	br	11934 <__alt_data_end+0xffff1934>
