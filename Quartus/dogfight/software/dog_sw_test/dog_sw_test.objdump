
dog_sw_test.elf:     file format elf32-littlenios2
dog_sw_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000014f0 memsz 0x000014f0 flags r-x
    LOAD off    0x00002510 vaddr 0x00011510 paddr 0x00011624 align 2**12
         filesz 0x00000114 memsz 0x00000114 flags rw-
    LOAD off    0x00002738 vaddr 0x00011738 paddr 0x00011738 align 2**12
         filesz 0x00000000 memsz 0x00000204 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001260  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000130  000113e0  000113e0  000023e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000114  00011510  00011624  00002510  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000204  00011738  00011738  00002738  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0001193c  0001193c  00002624  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002624  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000003a0  00000000  00000000  00002648  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000035d8  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001609  00000000  00000000  00005fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001677  00000000  00000000  000075c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000490  00000000  00000000  00008c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001554  00000000  00000000  000090d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001b45  00000000  00000000  0000a624  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000c16c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003d0  00000000  00000000  0000c180  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000da52  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000da55  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000da58  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000da59  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000da5a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000da63  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000da6c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  0000da75  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001f  00000000  00000000  0000da87  2**0
                  CONTENTS, READONLY
 26 .jdi          00005009  00000000  00000000  0000daa6  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00049c3e  00000000  00000000  00012aaf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
000113e0 l    d  .rodata	00000000 .rodata
00011510 l    d  .rwdata	00000000 .rwdata
00011738 l    d  .bss	00000000 .bss
0001193c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../dog_sw_test_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 dogtest.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011580 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0001122c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00011754 g     O .bss	00000004 alt_instruction_exception_handler
0001106c g     F .text	0000002c alt_main
0001023c g     F .text	00000014 led_write
0001183c g     O .bss	00000100 alt_irq
00011624 g       *ABS*	00000000 __flash_rwdata_start
00010378 g     F .text	000000a8 filterFIR
000101bc g     F .text	00000080 sys_timer_isr
00011608 g     O .rwdata	00000004 jtag_uart
00011318 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00011120 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011758 g     O .bss	00000004 errno
0001174c g     O .bss	00000004 alt_argv
00019604 g       *ABS*	00000000 _gp
000115ac g     O .rwdata	00000030 alt_fd_list
000112a0 g     F .text	00000074 alt_find_dev
00011320 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0001160c g     O .rwdata	00000004 alt_max_fd
00010ef8 g     F .text	00000094 alt_irq_register
00010d84 g     F .text	00000110 .hidden __extendsfdf2
0001193c g       *ABS*	00000000 __bss_end
00011744 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
000115dc g     O .rwdata	00000028 alt_dev_null
00011228 g     F .text	00000004 alt_dcache_flush_all
00010d04 g     F .text	00000080 .hidden __fixdfsi
00011624 g       *ABS*	00000000 __ram_rwdata_end
00010284 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00011610 g     O .rwdata	00000008 alt_dev_list
00011510 g       *ABS*	00000000 __ram_rodata_end
0001173c g     O .bss	00000001 led
000117cc g     O .bss	00000070 filter_coefficients
0001193c g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00010e94 g     F .text	00000064 .hidden __clzsi2
00010180 g     F .text	0000003c _start
00011740 g     O .bss	00000004 level
000110b8 g     F .text	00000010 alt_sys_init
000110d0 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00010470 g     F .text	00000028 .hidden __mulsi3
00011510 g       *ABS*	00000000 __ram_rwdata_start
000113e0 g       *ABS*	00000000 __ram_rodata_start
00011178 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00011394 g     F .text	00000030 memcmp
0001193c g       *ABS*	00000000 __alt_stack_base
00010498 g     F .text	0000086c .hidden __muldf3
00011234 g     F .text	0000006c alt_dev_llist_insert
00011738 g       *ABS*	00000000 __bss_start
00010420 g     F .text	00000050 main
00011748 g     O .bss	00000004 alt_envp
00011620 g     O .rwdata	00000004 alt_errno
000113e0 g       *ABS*	00000000 __flash_rodata_start
00011098 g     F .text	00000020 alt_irq_init
000102f4 g     F .text	00000084 floatArrayToFixed
00011404 g     O .rodata	00000100 .hidden __clz_tab
00011750 g     O .bss	00000004 alt_argc
0001175c g     O .bss	00000070 filter_state
00010020 g       .exceptions	00000000 alt_irq_entry
00011738 g     O .bss	00000001 pwm
00011618 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000110c8 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00011624 g       *ABS*	00000000 _edata
0001193c g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
000111d0 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010250 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
000110e4 g     F .text	00000020 alt_up_accelerometer_spi_read
00011104 g     F .text	0000001c alt_up_accelerometer_spi_write
000113c4 g     F .text	0000001c strlen
00011314 g     F .text	00000004 alt_icache_flush_all
00011604 g     O .rwdata	00000004 alt_priority_mask
00011510 g     O .rwdata	00000070 filter_coefficientsf
00010f8c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	84060f04 	addi	r16,r16,6204

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a05417 	ldw	r2,-32432(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a58114 	ori	gp,gp,38404
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	1085ce14 	ori	r2,r2,5944

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c64f14 	ori	r3,r3,6460

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	0010f8c0 	call	10f8c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	001106c0 	call	1106c <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840004 	addi	r2,r2,4096
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a04f17 	ldw	r2,-32452(gp)
   101cc:	d1604d07 	ldb	r5,-32460(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c41004 	addi	r3,r3,4160
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a04e03 	ldbu	r2,-32456(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a04e03 	ldbu	r2,-32456(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a04e03 	ldbu	r2,-32456(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a04d03 	ldbu	r2,-32460(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0204d05 	stb	zero,-32460(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a04d05 	stb	r2,-32460(gp)
   10238:	f800283a 	ret

0001023c <led_write>:
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   1023c:	008000b4 	movhi	r2,2
   10240:	21003fcc 	andi	r4,r4,255
   10244:	10841004 	addi	r2,r2,4160
   10248:	11000035 	stwio	r4,0(r2)
   1024c:	f800283a 	ret

00010250 <convert_read>:
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
   10250:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10254:	2005d1ba 	srai	r2,r4,6
    * level = (acc_read >> 1) & 0x1f;
   10258:	2009d07a 	srai	r4,r4,1
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   1025c:	10c001cc 	andi	r3,r2,7
   10260:	00800204 	movi	r2,8
   10264:	10cfc83a 	sub	r7,r2,r3
   10268:	11ce983a 	sll	r7,r2,r7
   1026c:	10c5d83a 	sra	r2,r2,r3
    * level = (acc_read >> 1) & 0x1f;
   10270:	210007cc 	andi	r4,r4,31
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10274:	3884b03a 	or	r2,r7,r2
   10278:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   1027c:	29000015 	stw	r4,0(r5)
   10280:	f800283a 	ret

00010284 <timer_init>:
    } else {
        pwm++;
    }

}
void timer_init(void * isr) {
   10284:	defffe04 	addi	sp,sp,-8
   10288:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   1028c:	040000b4 	movhi	r16,2
    } else {
        pwm++;
    }

}
void timer_init(void * isr) {
   10290:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10294:	84040104 	addi	r16,r16,4100
   10298:	008000c4 	movi	r2,3
   1029c:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   102a0:	00c000b4 	movhi	r3,2
   102a4:	0005883a 	mov	r2,zero
   102a8:	18c40004 	addi	r3,r3,4096
   102ac:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   102b0:	00c000b4 	movhi	r3,2
   102b4:	18c40204 	addi	r3,r3,4104
   102b8:	01424004 	movi	r5,2304
   102bc:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   102c0:	00c000b4 	movhi	r3,2
   102c4:	18c40304 	addi	r3,r3,4108
   102c8:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   102cc:	200d883a 	mov	r6,r4
   102d0:	000b883a 	mov	r5,zero
   102d4:	01000084 	movi	r4,2
   102d8:	0010ef80 	call	10ef8 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   102dc:	008001c4 	movi	r2,7
   102e0:	80800035 	stwio	r2,0(r16)

}
   102e4:	dfc00117 	ldw	ra,4(sp)
   102e8:	dc000017 	ldw	r16,0(sp)
   102ec:	dec00204 	addi	sp,sp,8
   102f0:	f800283a 	ret

000102f4 <floatArrayToFixed>:

#define NUM_TAPS 28
#define Q_BITS 8

void floatArrayToFixed(alt_32 fixedArray[], float floatArray[], int arraySize) {
   102f4:	defffb04 	addi	sp,sp,-20
   102f8:	dcc00315 	stw	r19,12(sp)
   102fc:	dc800215 	stw	r18,8(sp)
   10300:	dc400115 	stw	r17,4(sp)
   10304:	dc000015 	stw	r16,0(sp)
   10308:	dfc00415 	stw	ra,16(sp)
   1030c:	3027883a 	mov	r19,r6
   10310:	2823883a 	mov	r17,r5
   10314:	2025883a 	mov	r18,r4
    for (int i = 0; i < arraySize; i++) {
   10318:	0021883a 	mov	r16,zero
   1031c:	84c00f0e 	bge	r16,r19,1035c <floatArrayToFixed+0x68>
        fixedArray[i] = (alt_32)(floatArray[i] * pow(2,Q_BITS));
   10320:	89000017 	ldw	r4,0(r17)

#define NUM_TAPS 28
#define Q_BITS 8

void floatArrayToFixed(alt_32 fixedArray[], float floatArray[], int arraySize) {
    for (int i = 0; i < arraySize; i++) {
   10324:	84000044 	addi	r16,r16,1
   10328:	8c400104 	addi	r17,r17,4
        fixedArray[i] = (alt_32)(floatArray[i] * pow(2,Q_BITS));
   1032c:	0010d840 	call	10d84 <__extendsfdf2>
   10330:	000d883a 	mov	r6,zero
   10334:	01d01c34 	movhi	r7,16496
   10338:	1009883a 	mov	r4,r2
   1033c:	180b883a 	mov	r5,r3
   10340:	00104980 	call	10498 <__muldf3>
   10344:	1009883a 	mov	r4,r2
   10348:	180b883a 	mov	r5,r3
   1034c:	0010d040 	call	10d04 <__fixdfsi>
   10350:	90800015 	stw	r2,0(r18)
   10354:	94800104 	addi	r18,r18,4
   10358:	003ff006 	br	1031c <__alt_data_end+0xffff031c>
    }
}
   1035c:	dfc00417 	ldw	ra,16(sp)
   10360:	dcc00317 	ldw	r19,12(sp)
   10364:	dc800217 	ldw	r18,8(sp)
   10368:	dc400117 	ldw	r17,4(sp)
   1036c:	dc000017 	ldw	r16,0(sp)
   10370:	dec00504 	addi	sp,sp,20
   10374:	f800283a 	ret

00010378 <filterFIR>:
alt_32 filter_coefficients[NUM_TAPS];


//const float filter_coefficients[NUM_TAPS] = {0.0245, 0.0245, 0.9510};

alt_32 filterFIR(alt_32 acc_read) {
   10378:	00800074 	movhi	r2,1
   1037c:	1085f104 	addi	r2,r2,6084
    for (int i = NUM_TAPS - 1; i > 0; i--)
   10380:	00c006c4 	movi	r3,27
    {
        filter_state[i] = filter_state[i - 1];
   10384:	11400017 	ldw	r5,0(r2)
   10388:	18ffffc4 	addi	r3,r3,-1
   1038c:	10bfff04 	addi	r2,r2,-4
   10390:	11400215 	stw	r5,8(r2)


//const float filter_coefficients[NUM_TAPS] = {0.0245, 0.0245, 0.9510};

alt_32 filterFIR(alt_32 acc_read) {
    for (int i = NUM_TAPS - 1; i > 0; i--)
   10394:	183ffb1e 	bne	r3,zero,10384 <__alt_data_end+0xffff0384>
alt_32 filter_coefficients[NUM_TAPS];


//const float filter_coefficients[NUM_TAPS] = {0.0245, 0.0245, 0.9510};

alt_32 filterFIR(alt_32 acc_read) {
   10398:	defffa04 	addi	sp,sp,-24
    for (int i = NUM_TAPS - 1; i > 0; i--)
    {
        filter_state[i] = filter_state[i - 1];
    }
    filter_state[0] = acc_read;
   1039c:	00800074 	movhi	r2,1
alt_32 filter_coefficients[NUM_TAPS];


//const float filter_coefficients[NUM_TAPS] = {0.0245, 0.0245, 0.9510};

alt_32 filterFIR(alt_32 acc_read) {
   103a0:	dd000415 	stw	r20,16(sp)
   103a4:	dcc00315 	stw	r19,12(sp)
   103a8:	dc800215 	stw	r18,8(sp)
   103ac:	dc400115 	stw	r17,4(sp)
   103b0:	dc000015 	stw	r16,0(sp)
    for (int i = NUM_TAPS - 1; i > 0; i--)
    {
        filter_state[i] = filter_state[i - 1];
    }
    filter_state[0] = acc_read;
   103b4:	1085d704 	addi	r2,r2,5980
alt_32 filter_coefficients[NUM_TAPS];


//const float filter_coefficients[NUM_TAPS] = {0.0245, 0.0245, 0.9510};

alt_32 filterFIR(alt_32 acc_read) {
   103b8:	dfc00515 	stw	ra,20(sp)
        filter_state[i] = filter_state[i - 1];
    }
    filter_state[0] = acc_read;
    alt_32 filtered_value = 0.0;
    for (int i = 0; i < NUM_TAPS; i++) {
        filtered_value += (filter_state[i] * filter_coefficients[i]) >> Q_BITS;
   103bc:	05000074 	movhi	r20,1
alt_32 filterFIR(alt_32 acc_read) {
    for (int i = NUM_TAPS - 1; i > 0; i--)
    {
        filter_state[i] = filter_state[i - 1];
    }
    filter_state[0] = acc_read;
   103c0:	11000015 	stw	r4,0(r2)
   103c4:	0021883a 	mov	r16,zero
    alt_32 filtered_value = 0.0;
   103c8:	0025883a 	mov	r18,zero
   103cc:	1023883a 	mov	r17,r2
    for (int i = 0; i < NUM_TAPS; i++) {
        filtered_value += (filter_state[i] * filter_coefficients[i]) >> Q_BITS;
   103d0:	a505f304 	addi	r20,r20,6092
    {
        filter_state[i] = filter_state[i - 1];
    }
    filter_state[0] = acc_read;
    alt_32 filtered_value = 0.0;
    for (int i = 0; i < NUM_TAPS; i++) {
   103d4:	04c01c04 	movi	r19,112
        filtered_value += (filter_state[i] * filter_coefficients[i]) >> Q_BITS;
   103d8:	8445883a 	add	r2,r16,r17
   103dc:	8507883a 	add	r3,r16,r20
   103e0:	19400017 	ldw	r5,0(r3)
   103e4:	11000017 	ldw	r4,0(r2)
   103e8:	84000104 	addi	r16,r16,4
   103ec:	00104700 	call	10470 <__mulsi3>
   103f0:	1005d23a 	srai	r2,r2,8
   103f4:	90a5883a 	add	r18,r18,r2
    {
        filter_state[i] = filter_state[i - 1];
    }
    filter_state[0] = acc_read;
    alt_32 filtered_value = 0.0;
    for (int i = 0; i < NUM_TAPS; i++) {
   103f8:	84fff71e 	bne	r16,r19,103d8 <__alt_data_end+0xffff03d8>
        filtered_value += (filter_state[i] * filter_coefficients[i]) >> Q_BITS;
    }
    return filtered_value;
}
   103fc:	9005883a 	mov	r2,r18
   10400:	dfc00517 	ldw	ra,20(sp)
   10404:	dd000417 	ldw	r20,16(sp)
   10408:	dcc00317 	ldw	r19,12(sp)
   1040c:	dc800217 	ldw	r18,8(sp)
   10410:	dc400117 	ldw	r17,4(sp)
   10414:	dc000017 	ldw	r16,0(sp)
   10418:	dec00604 	addi	sp,sp,24
   1041c:	f800283a 	ret

00010420 <main>:


int main() {
	floatArrayToFixed(filter_coefficients,filter_coefficientsf, NUM_TAPS);
   10420:	01400074 	movhi	r5,1
   10424:	01000074 	movhi	r4,1
    }
    return filtered_value;
}


int main() {
   10428:	defffc04 	addi	sp,sp,-16
	floatArrayToFixed(filter_coefficients,filter_coefficientsf, NUM_TAPS);
   1042c:	2105f304 	addi	r4,r4,6092
   10430:	01800704 	movi	r6,28
   10434:	29454404 	addi	r5,r5,5392
    }
    return filtered_value;
}


int main() {
   10438:	dfc00315 	stw	ra,12(sp)
	floatArrayToFixed(filter_coefficients,filter_coefficientsf, NUM_TAPS);
   1043c:	00102f40 	call	102f4 <floatArrayToFixed>
    alt_32 x_read,y_read,z_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10440:	01000074 	movhi	r4,1
   10444:	2104f804 	addi	r4,r4,5088
   10448:	00110c80 	call	110c8 <alt_up_accelerometer_spi_open_dev>
    int sw;
    if (acc_dev == NULL) {
   1044c:	10000426 	beq	r2,zero,10460 <main+0x40>
        return 1;
    }
    //alt_printf("hey\t");
    timer_init(sys_timer_isr);
   10450:	01000074 	movhi	r4,1
   10454:	21006f04 	addi	r4,r4,444
   10458:	00102840 	call	10284 <timer_init>
   1045c:	003fff06 	br	1045c <__alt_data_end+0xffff045c>
			alt_printf("%x\n", z_read);
			convert_read(filterFIR(x_read), & level, & led);
    	}
    }
    return 0;
}
   10460:	00800044 	movi	r2,1
   10464:	dfc00317 	ldw	ra,12(sp)
   10468:	dec00404 	addi	sp,sp,16
   1046c:	f800283a 	ret

00010470 <__mulsi3>:
   10470:	0005883a 	mov	r2,zero
   10474:	20000726 	beq	r4,zero,10494 <__mulsi3+0x24>
   10478:	20c0004c 	andi	r3,r4,1
   1047c:	2008d07a 	srli	r4,r4,1
   10480:	18000126 	beq	r3,zero,10488 <__mulsi3+0x18>
   10484:	1145883a 	add	r2,r2,r5
   10488:	294b883a 	add	r5,r5,r5
   1048c:	203ffa1e 	bne	r4,zero,10478 <__alt_data_end+0xffff0478>
   10490:	f800283a 	ret
   10494:	f800283a 	ret

00010498 <__muldf3>:
   10498:	deffee04 	addi	sp,sp,-72
   1049c:	dd000c15 	stw	r20,48(sp)
   104a0:	2828d53a 	srli	r20,r5,20
   104a4:	ddc00f15 	stw	r23,60(sp)
   104a8:	282ed7fa 	srli	r23,r5,31
   104ac:	dc000815 	stw	r16,32(sp)
   104b0:	04000434 	movhi	r16,16
   104b4:	dcc00b15 	stw	r19,44(sp)
   104b8:	843fffc4 	addi	r16,r16,-1
   104bc:	dfc01115 	stw	ra,68(sp)
   104c0:	df001015 	stw	fp,64(sp)
   104c4:	dd800e15 	stw	r22,56(sp)
   104c8:	dd400d15 	stw	r21,52(sp)
   104cc:	dc800a15 	stw	r18,40(sp)
   104d0:	dc400915 	stw	r17,36(sp)
   104d4:	a501ffcc 	andi	r20,r20,2047
   104d8:	2c20703a 	and	r16,r5,r16
   104dc:	b827883a 	mov	r19,r23
   104e0:	ba403fcc 	andi	r9,r23,255
   104e4:	a0006026 	beq	r20,zero,10668 <__muldf3+0x1d0>
   104e8:	0081ffc4 	movi	r2,2047
   104ec:	202d883a 	mov	r22,r4
   104f0:	a0803626 	beq	r20,r2,105cc <__muldf3+0x134>
   104f4:	84000434 	orhi	r16,r16,16
   104f8:	200ad77a 	srli	r5,r4,29
   104fc:	800490fa 	slli	r2,r16,3
   10500:	202c90fa 	slli	r22,r4,3
   10504:	a53f0044 	addi	r20,r20,-1023
   10508:	28a0b03a 	or	r16,r5,r2
   1050c:	002b883a 	mov	r21,zero
   10510:	000b883a 	mov	r5,zero
   10514:	3804d53a 	srli	r2,r7,20
   10518:	3838d7fa 	srli	fp,r7,31
   1051c:	04400434 	movhi	r17,16
   10520:	8c7fffc4 	addi	r17,r17,-1
   10524:	1081ffcc 	andi	r2,r2,2047
   10528:	3025883a 	mov	r18,r6
   1052c:	3c62703a 	and	r17,r7,r17
   10530:	e2803fcc 	andi	r10,fp,255
   10534:	10006d26 	beq	r2,zero,106ec <__muldf3+0x254>
   10538:	00c1ffc4 	movi	r3,2047
   1053c:	10c06526 	beq	r2,r3,106d4 <__muldf3+0x23c>
   10540:	8c400434 	orhi	r17,r17,16
   10544:	300ed77a 	srli	r7,r6,29
   10548:	880690fa 	slli	r3,r17,3
   1054c:	302490fa 	slli	r18,r6,3
   10550:	10bf0044 	addi	r2,r2,-1023
   10554:	38e2b03a 	or	r17,r7,r3
   10558:	000f883a 	mov	r7,zero
   1055c:	a087883a 	add	r3,r20,r2
   10560:	010003c4 	movi	r4,15
   10564:	3d44b03a 	or	r2,r7,r21
   10568:	e5ccf03a 	xor	r6,fp,r23
   1056c:	1a000044 	addi	r8,r3,1
   10570:	20809b36 	bltu	r4,r2,107e0 <__muldf3+0x348>
   10574:	100490ba 	slli	r2,r2,2
   10578:	01000074 	movhi	r4,1
   1057c:	21016304 	addi	r4,r4,1420
   10580:	1105883a 	add	r2,r2,r4
   10584:	10800017 	ldw	r2,0(r2)
   10588:	1000683a 	jmp	r2
   1058c:	000107e0 	cmpeqi	zero,zero,1055
   10590:	000105ec 	andhi	zero,zero,1047
   10594:	000105ec 	andhi	zero,zero,1047
   10598:	000105e8 	cmpgeui	zero,zero,1047
   1059c:	000107bc 	xorhi	zero,zero,1054
   105a0:	000107bc 	xorhi	zero,zero,1054
   105a4:	000107a4 	muli	zero,zero,1054
   105a8:	000105e8 	cmpgeui	zero,zero,1047
   105ac:	000107bc 	xorhi	zero,zero,1054
   105b0:	000107a4 	muli	zero,zero,1054
   105b4:	000107bc 	xorhi	zero,zero,1054
   105b8:	000105e8 	cmpgeui	zero,zero,1047
   105bc:	000107cc 	andi	zero,zero,1055
   105c0:	000107cc 	andi	zero,zero,1055
   105c4:	000107cc 	andi	zero,zero,1055
   105c8:	00010b2c 	andhi	zero,zero,1068
   105cc:	2404b03a 	or	r2,r4,r16
   105d0:	1000711e 	bne	r2,zero,10798 <__muldf3+0x300>
   105d4:	05400204 	movi	r21,8
   105d8:	0021883a 	mov	r16,zero
   105dc:	002d883a 	mov	r22,zero
   105e0:	01400084 	movi	r5,2
   105e4:	003fcb06 	br	10514 <__alt_data_end+0xffff0514>
   105e8:	500d883a 	mov	r6,r10
   105ec:	00800084 	movi	r2,2
   105f0:	38805926 	beq	r7,r2,10758 <__muldf3+0x2c0>
   105f4:	008000c4 	movi	r2,3
   105f8:	3881bb26 	beq	r7,r2,10ce8 <__muldf3+0x850>
   105fc:	00800044 	movi	r2,1
   10600:	3881961e 	bne	r7,r2,10c5c <__muldf3+0x7c4>
   10604:	3027883a 	mov	r19,r6
   10608:	0005883a 	mov	r2,zero
   1060c:	0021883a 	mov	r16,zero
   10610:	002d883a 	mov	r22,zero
   10614:	1004953a 	slli	r2,r2,20
   10618:	98c03fcc 	andi	r3,r19,255
   1061c:	04400434 	movhi	r17,16
   10620:	8c7fffc4 	addi	r17,r17,-1
   10624:	180697fa 	slli	r3,r3,31
   10628:	8460703a 	and	r16,r16,r17
   1062c:	80a0b03a 	or	r16,r16,r2
   10630:	80c6b03a 	or	r3,r16,r3
   10634:	b005883a 	mov	r2,r22
   10638:	dfc01117 	ldw	ra,68(sp)
   1063c:	df001017 	ldw	fp,64(sp)
   10640:	ddc00f17 	ldw	r23,60(sp)
   10644:	dd800e17 	ldw	r22,56(sp)
   10648:	dd400d17 	ldw	r21,52(sp)
   1064c:	dd000c17 	ldw	r20,48(sp)
   10650:	dcc00b17 	ldw	r19,44(sp)
   10654:	dc800a17 	ldw	r18,40(sp)
   10658:	dc400917 	ldw	r17,36(sp)
   1065c:	dc000817 	ldw	r16,32(sp)
   10660:	dec01204 	addi	sp,sp,72
   10664:	f800283a 	ret
   10668:	2404b03a 	or	r2,r4,r16
   1066c:	202b883a 	mov	r21,r4
   10670:	10004426 	beq	r2,zero,10784 <__muldf3+0x2ec>
   10674:	80015126 	beq	r16,zero,10bbc <__muldf3+0x724>
   10678:	8009883a 	mov	r4,r16
   1067c:	d9800715 	stw	r6,28(sp)
   10680:	d9c00215 	stw	r7,8(sp)
   10684:	da400415 	stw	r9,16(sp)
   10688:	0010e940 	call	10e94 <__clzsi2>
   1068c:	d9800717 	ldw	r6,28(sp)
   10690:	d9c00217 	ldw	r7,8(sp)
   10694:	da400417 	ldw	r9,16(sp)
   10698:	113ffd44 	addi	r4,r2,-11
   1069c:	00c00704 	movi	r3,28
   106a0:	19014216 	blt	r3,r4,10bac <__muldf3+0x714>
   106a4:	00c00744 	movi	r3,29
   106a8:	15bffe04 	addi	r22,r2,-8
   106ac:	1907c83a 	sub	r3,r3,r4
   106b0:	85a0983a 	sll	r16,r16,r22
   106b4:	a8c6d83a 	srl	r3,r21,r3
   106b8:	adac983a 	sll	r22,r21,r22
   106bc:	1c20b03a 	or	r16,r3,r16
   106c0:	1080fcc4 	addi	r2,r2,1011
   106c4:	00a9c83a 	sub	r20,zero,r2
   106c8:	002b883a 	mov	r21,zero
   106cc:	000b883a 	mov	r5,zero
   106d0:	003f9006 	br	10514 <__alt_data_end+0xffff0514>
   106d4:	3446b03a 	or	r3,r6,r17
   106d8:	1800281e 	bne	r3,zero,1077c <__muldf3+0x2e4>
   106dc:	0023883a 	mov	r17,zero
   106e0:	0025883a 	mov	r18,zero
   106e4:	01c00084 	movi	r7,2
   106e8:	003f9c06 	br	1055c <__alt_data_end+0xffff055c>
   106ec:	3446b03a 	or	r3,r6,r17
   106f0:	18001e26 	beq	r3,zero,1076c <__muldf3+0x2d4>
   106f4:	88012126 	beq	r17,zero,10b7c <__muldf3+0x6e4>
   106f8:	8809883a 	mov	r4,r17
   106fc:	d9400215 	stw	r5,8(sp)
   10700:	d9800715 	stw	r6,28(sp)
   10704:	da400415 	stw	r9,16(sp)
   10708:	da800315 	stw	r10,12(sp)
   1070c:	0010e940 	call	10e94 <__clzsi2>
   10710:	d9400217 	ldw	r5,8(sp)
   10714:	d9800717 	ldw	r6,28(sp)
   10718:	da400417 	ldw	r9,16(sp)
   1071c:	da800317 	ldw	r10,12(sp)
   10720:	113ffd44 	addi	r4,r2,-11
   10724:	00c00704 	movi	r3,28
   10728:	19011016 	blt	r3,r4,10b6c <__muldf3+0x6d4>
   1072c:	00c00744 	movi	r3,29
   10730:	14bffe04 	addi	r18,r2,-8
   10734:	1907c83a 	sub	r3,r3,r4
   10738:	8ca2983a 	sll	r17,r17,r18
   1073c:	30c6d83a 	srl	r3,r6,r3
   10740:	34a4983a 	sll	r18,r6,r18
   10744:	1c62b03a 	or	r17,r3,r17
   10748:	1080fcc4 	addi	r2,r2,1011
   1074c:	0085c83a 	sub	r2,zero,r2
   10750:	000f883a 	mov	r7,zero
   10754:	003f8106 	br	1055c <__alt_data_end+0xffff055c>
   10758:	3027883a 	mov	r19,r6
   1075c:	0081ffc4 	movi	r2,2047
   10760:	0021883a 	mov	r16,zero
   10764:	002d883a 	mov	r22,zero
   10768:	003faa06 	br	10614 <__alt_data_end+0xffff0614>
   1076c:	0023883a 	mov	r17,zero
   10770:	0025883a 	mov	r18,zero
   10774:	01c00044 	movi	r7,1
   10778:	003f7806 	br	1055c <__alt_data_end+0xffff055c>
   1077c:	01c000c4 	movi	r7,3
   10780:	003f7606 	br	1055c <__alt_data_end+0xffff055c>
   10784:	05400104 	movi	r21,4
   10788:	0021883a 	mov	r16,zero
   1078c:	002d883a 	mov	r22,zero
   10790:	01400044 	movi	r5,1
   10794:	003f5f06 	br	10514 <__alt_data_end+0xffff0514>
   10798:	05400304 	movi	r21,12
   1079c:	014000c4 	movi	r5,3
   107a0:	003f5c06 	br	10514 <__alt_data_end+0xffff0514>
   107a4:	04000434 	movhi	r16,16
   107a8:	0027883a 	mov	r19,zero
   107ac:	843fffc4 	addi	r16,r16,-1
   107b0:	05bfffc4 	movi	r22,-1
   107b4:	0081ffc4 	movi	r2,2047
   107b8:	003f9606 	br	10614 <__alt_data_end+0xffff0614>
   107bc:	8023883a 	mov	r17,r16
   107c0:	b025883a 	mov	r18,r22
   107c4:	280f883a 	mov	r7,r5
   107c8:	003f8806 	br	105ec <__alt_data_end+0xffff05ec>
   107cc:	8023883a 	mov	r17,r16
   107d0:	b025883a 	mov	r18,r22
   107d4:	480d883a 	mov	r6,r9
   107d8:	280f883a 	mov	r7,r5
   107dc:	003f8306 	br	105ec <__alt_data_end+0xffff05ec>
   107e0:	b026d43a 	srli	r19,r22,16
   107e4:	902ed43a 	srli	r23,r18,16
   107e8:	b5bfffcc 	andi	r22,r22,65535
   107ec:	94bfffcc 	andi	r18,r18,65535
   107f0:	b00b883a 	mov	r5,r22
   107f4:	9009883a 	mov	r4,r18
   107f8:	d8c00515 	stw	r3,20(sp)
   107fc:	d9800715 	stw	r6,28(sp)
   10800:	da000615 	stw	r8,24(sp)
   10804:	00104700 	call	10470 <__mulsi3>
   10808:	980b883a 	mov	r5,r19
   1080c:	9009883a 	mov	r4,r18
   10810:	1029883a 	mov	r20,r2
   10814:	00104700 	call	10470 <__mulsi3>
   10818:	b80b883a 	mov	r5,r23
   1081c:	9809883a 	mov	r4,r19
   10820:	102b883a 	mov	r21,r2
   10824:	00104700 	call	10470 <__mulsi3>
   10828:	b809883a 	mov	r4,r23
   1082c:	b00b883a 	mov	r5,r22
   10830:	1039883a 	mov	fp,r2
   10834:	00104700 	call	10470 <__mulsi3>
   10838:	a008d43a 	srli	r4,r20,16
   1083c:	1545883a 	add	r2,r2,r21
   10840:	d8c00517 	ldw	r3,20(sp)
   10844:	2085883a 	add	r2,r4,r2
   10848:	d9800717 	ldw	r6,28(sp)
   1084c:	da000617 	ldw	r8,24(sp)
   10850:	1540022e 	bgeu	r2,r21,1085c <__muldf3+0x3c4>
   10854:	01000074 	movhi	r4,1
   10858:	e139883a 	add	fp,fp,r4
   1085c:	100e943a 	slli	r7,r2,16
   10860:	1004d43a 	srli	r2,r2,16
   10864:	882ad43a 	srli	r21,r17,16
   10868:	a53fffcc 	andi	r20,r20,65535
   1086c:	8c7fffcc 	andi	r17,r17,65535
   10870:	3d29883a 	add	r20,r7,r20
   10874:	b00b883a 	mov	r5,r22
   10878:	8809883a 	mov	r4,r17
   1087c:	d8c00515 	stw	r3,20(sp)
   10880:	d9800715 	stw	r6,28(sp)
   10884:	da000615 	stw	r8,24(sp)
   10888:	dd000115 	stw	r20,4(sp)
   1088c:	d8800015 	stw	r2,0(sp)
   10890:	00104700 	call	10470 <__mulsi3>
   10894:	980b883a 	mov	r5,r19
   10898:	8809883a 	mov	r4,r17
   1089c:	d8800215 	stw	r2,8(sp)
   108a0:	00104700 	call	10470 <__mulsi3>
   108a4:	9809883a 	mov	r4,r19
   108a8:	a80b883a 	mov	r5,r21
   108ac:	1029883a 	mov	r20,r2
   108b0:	00104700 	call	10470 <__mulsi3>
   108b4:	b00b883a 	mov	r5,r22
   108b8:	a809883a 	mov	r4,r21
   108bc:	d8800415 	stw	r2,16(sp)
   108c0:	00104700 	call	10470 <__mulsi3>
   108c4:	d9c00217 	ldw	r7,8(sp)
   108c8:	1505883a 	add	r2,r2,r20
   108cc:	d8c00517 	ldw	r3,20(sp)
   108d0:	3826d43a 	srli	r19,r7,16
   108d4:	d9800717 	ldw	r6,28(sp)
   108d8:	da000617 	ldw	r8,24(sp)
   108dc:	9885883a 	add	r2,r19,r2
   108e0:	da400417 	ldw	r9,16(sp)
   108e4:	1500022e 	bgeu	r2,r20,108f0 <__muldf3+0x458>
   108e8:	01000074 	movhi	r4,1
   108ec:	4913883a 	add	r9,r9,r4
   108f0:	1028d43a 	srli	r20,r2,16
   108f4:	1004943a 	slli	r2,r2,16
   108f8:	802cd43a 	srli	r22,r16,16
   108fc:	843fffcc 	andi	r16,r16,65535
   10900:	3cffffcc 	andi	r19,r7,65535
   10904:	9009883a 	mov	r4,r18
   10908:	800b883a 	mov	r5,r16
   1090c:	a269883a 	add	r20,r20,r9
   10910:	d8c00515 	stw	r3,20(sp)
   10914:	d9800715 	stw	r6,28(sp)
   10918:	da000615 	stw	r8,24(sp)
   1091c:	14e7883a 	add	r19,r2,r19
   10920:	00104700 	call	10470 <__mulsi3>
   10924:	9009883a 	mov	r4,r18
   10928:	b00b883a 	mov	r5,r22
   1092c:	d8800315 	stw	r2,12(sp)
   10930:	00104700 	call	10470 <__mulsi3>
   10934:	b809883a 	mov	r4,r23
   10938:	b00b883a 	mov	r5,r22
   1093c:	d8800215 	stw	r2,8(sp)
   10940:	00104700 	call	10470 <__mulsi3>
   10944:	b80b883a 	mov	r5,r23
   10948:	8009883a 	mov	r4,r16
   1094c:	d8800415 	stw	r2,16(sp)
   10950:	00104700 	call	10470 <__mulsi3>
   10954:	da800317 	ldw	r10,12(sp)
   10958:	d9c00217 	ldw	r7,8(sp)
   1095c:	d9000017 	ldw	r4,0(sp)
   10960:	502ed43a 	srli	r23,r10,16
   10964:	11c5883a 	add	r2,r2,r7
   10968:	24e5883a 	add	r18,r4,r19
   1096c:	b885883a 	add	r2,r23,r2
   10970:	d8c00517 	ldw	r3,20(sp)
   10974:	d9800717 	ldw	r6,28(sp)
   10978:	da000617 	ldw	r8,24(sp)
   1097c:	da400417 	ldw	r9,16(sp)
   10980:	11c0022e 	bgeu	r2,r7,1098c <__muldf3+0x4f4>
   10984:	01000074 	movhi	r4,1
   10988:	4913883a 	add	r9,r9,r4
   1098c:	100ed43a 	srli	r7,r2,16
   10990:	1004943a 	slli	r2,r2,16
   10994:	55ffffcc 	andi	r23,r10,65535
   10998:	3a53883a 	add	r9,r7,r9
   1099c:	8809883a 	mov	r4,r17
   109a0:	800b883a 	mov	r5,r16
   109a4:	d8c00515 	stw	r3,20(sp)
   109a8:	d9800715 	stw	r6,28(sp)
   109ac:	da000615 	stw	r8,24(sp)
   109b0:	da400415 	stw	r9,16(sp)
   109b4:	15ef883a 	add	r23,r2,r23
   109b8:	00104700 	call	10470 <__mulsi3>
   109bc:	8809883a 	mov	r4,r17
   109c0:	b00b883a 	mov	r5,r22
   109c4:	d8800215 	stw	r2,8(sp)
   109c8:	00104700 	call	10470 <__mulsi3>
   109cc:	b00b883a 	mov	r5,r22
   109d0:	a809883a 	mov	r4,r21
   109d4:	d8800315 	stw	r2,12(sp)
   109d8:	00104700 	call	10470 <__mulsi3>
   109dc:	8009883a 	mov	r4,r16
   109e0:	a80b883a 	mov	r5,r21
   109e4:	1023883a 	mov	r17,r2
   109e8:	00104700 	call	10470 <__mulsi3>
   109ec:	d9c00217 	ldw	r7,8(sp)
   109f0:	da800317 	ldw	r10,12(sp)
   109f4:	d8c00517 	ldw	r3,20(sp)
   109f8:	3808d43a 	srli	r4,r7,16
   109fc:	1285883a 	add	r2,r2,r10
   10a00:	d9800717 	ldw	r6,28(sp)
   10a04:	2085883a 	add	r2,r4,r2
   10a08:	da000617 	ldw	r8,24(sp)
   10a0c:	da400417 	ldw	r9,16(sp)
   10a10:	1280022e 	bgeu	r2,r10,10a1c <__muldf3+0x584>
   10a14:	01000074 	movhi	r4,1
   10a18:	8923883a 	add	r17,r17,r4
   10a1c:	1008943a 	slli	r4,r2,16
   10a20:	39ffffcc 	andi	r7,r7,65535
   10a24:	e4b9883a 	add	fp,fp,r18
   10a28:	21cf883a 	add	r7,r4,r7
   10a2c:	e4e7803a 	cmpltu	r19,fp,r19
   10a30:	3d0f883a 	add	r7,r7,r20
   10a34:	bf39883a 	add	fp,r23,fp
   10a38:	99c9883a 	add	r4,r19,r7
   10a3c:	e5ef803a 	cmpltu	r23,fp,r23
   10a40:	490b883a 	add	r5,r9,r4
   10a44:	1004d43a 	srli	r2,r2,16
   10a48:	b965883a 	add	r18,r23,r5
   10a4c:	24c9803a 	cmpltu	r4,r4,r19
   10a50:	3d29803a 	cmpltu	r20,r7,r20
   10a54:	a128b03a 	or	r20,r20,r4
   10a58:	95ef803a 	cmpltu	r23,r18,r23
   10a5c:	2a53803a 	cmpltu	r9,r5,r9
   10a60:	a0a9883a 	add	r20,r20,r2
   10a64:	4deeb03a 	or	r23,r9,r23
   10a68:	a5ef883a 	add	r23,r20,r23
   10a6c:	bc63883a 	add	r17,r23,r17
   10a70:	e004927a 	slli	r2,fp,9
   10a74:	d9000117 	ldw	r4,4(sp)
   10a78:	882e927a 	slli	r23,r17,9
   10a7c:	9022d5fa 	srli	r17,r18,23
   10a80:	e038d5fa 	srli	fp,fp,23
   10a84:	1104b03a 	or	r2,r2,r4
   10a88:	9024927a 	slli	r18,r18,9
   10a8c:	1004c03a 	cmpne	r2,r2,zero
   10a90:	bc62b03a 	or	r17,r23,r17
   10a94:	1738b03a 	or	fp,r2,fp
   10a98:	8880402c 	andhi	r2,r17,256
   10a9c:	e4a4b03a 	or	r18,fp,r18
   10aa0:	10000726 	beq	r2,zero,10ac0 <__muldf3+0x628>
   10aa4:	9006d07a 	srli	r3,r18,1
   10aa8:	880497fa 	slli	r2,r17,31
   10aac:	9480004c 	andi	r18,r18,1
   10ab0:	8822d07a 	srli	r17,r17,1
   10ab4:	1ca4b03a 	or	r18,r3,r18
   10ab8:	14a4b03a 	or	r18,r2,r18
   10abc:	4007883a 	mov	r3,r8
   10ac0:	1880ffc4 	addi	r2,r3,1023
   10ac4:	0080460e 	bge	zero,r2,10be0 <__muldf3+0x748>
   10ac8:	910001cc 	andi	r4,r18,7
   10acc:	20000726 	beq	r4,zero,10aec <__muldf3+0x654>
   10ad0:	910003cc 	andi	r4,r18,15
   10ad4:	01400104 	movi	r5,4
   10ad8:	21400426 	beq	r4,r5,10aec <__muldf3+0x654>
   10adc:	9149883a 	add	r4,r18,r5
   10ae0:	24a5803a 	cmpltu	r18,r4,r18
   10ae4:	8ca3883a 	add	r17,r17,r18
   10ae8:	2025883a 	mov	r18,r4
   10aec:	8900402c 	andhi	r4,r17,256
   10af0:	20000426 	beq	r4,zero,10b04 <__muldf3+0x66c>
   10af4:	18810004 	addi	r2,r3,1024
   10af8:	00ffc034 	movhi	r3,65280
   10afc:	18ffffc4 	addi	r3,r3,-1
   10b00:	88e2703a 	and	r17,r17,r3
   10b04:	00c1ff84 	movi	r3,2046
   10b08:	18bf1316 	blt	r3,r2,10758 <__alt_data_end+0xffff0758>
   10b0c:	882c977a 	slli	r22,r17,29
   10b10:	9024d0fa 	srli	r18,r18,3
   10b14:	8822927a 	slli	r17,r17,9
   10b18:	1081ffcc 	andi	r2,r2,2047
   10b1c:	b4acb03a 	or	r22,r22,r18
   10b20:	8820d33a 	srli	r16,r17,12
   10b24:	3027883a 	mov	r19,r6
   10b28:	003eba06 	br	10614 <__alt_data_end+0xffff0614>
   10b2c:	8080022c 	andhi	r2,r16,8
   10b30:	10000926 	beq	r2,zero,10b58 <__muldf3+0x6c0>
   10b34:	8880022c 	andhi	r2,r17,8
   10b38:	1000071e 	bne	r2,zero,10b58 <__muldf3+0x6c0>
   10b3c:	00800434 	movhi	r2,16
   10b40:	8c000234 	orhi	r16,r17,8
   10b44:	10bfffc4 	addi	r2,r2,-1
   10b48:	e027883a 	mov	r19,fp
   10b4c:	80a0703a 	and	r16,r16,r2
   10b50:	902d883a 	mov	r22,r18
   10b54:	003f1706 	br	107b4 <__alt_data_end+0xffff07b4>
   10b58:	00800434 	movhi	r2,16
   10b5c:	84000234 	orhi	r16,r16,8
   10b60:	10bfffc4 	addi	r2,r2,-1
   10b64:	80a0703a 	and	r16,r16,r2
   10b68:	003f1206 	br	107b4 <__alt_data_end+0xffff07b4>
   10b6c:	147ff604 	addi	r17,r2,-40
   10b70:	3462983a 	sll	r17,r6,r17
   10b74:	0025883a 	mov	r18,zero
   10b78:	003ef306 	br	10748 <__alt_data_end+0xffff0748>
   10b7c:	3009883a 	mov	r4,r6
   10b80:	d9400215 	stw	r5,8(sp)
   10b84:	d9800715 	stw	r6,28(sp)
   10b88:	da400415 	stw	r9,16(sp)
   10b8c:	da800315 	stw	r10,12(sp)
   10b90:	0010e940 	call	10e94 <__clzsi2>
   10b94:	10800804 	addi	r2,r2,32
   10b98:	da800317 	ldw	r10,12(sp)
   10b9c:	da400417 	ldw	r9,16(sp)
   10ba0:	d9800717 	ldw	r6,28(sp)
   10ba4:	d9400217 	ldw	r5,8(sp)
   10ba8:	003edd06 	br	10720 <__alt_data_end+0xffff0720>
   10bac:	143ff604 	addi	r16,r2,-40
   10bb0:	ac20983a 	sll	r16,r21,r16
   10bb4:	002d883a 	mov	r22,zero
   10bb8:	003ec106 	br	106c0 <__alt_data_end+0xffff06c0>
   10bbc:	d9800715 	stw	r6,28(sp)
   10bc0:	d9c00215 	stw	r7,8(sp)
   10bc4:	da400415 	stw	r9,16(sp)
   10bc8:	0010e940 	call	10e94 <__clzsi2>
   10bcc:	10800804 	addi	r2,r2,32
   10bd0:	da400417 	ldw	r9,16(sp)
   10bd4:	d9c00217 	ldw	r7,8(sp)
   10bd8:	d9800717 	ldw	r6,28(sp)
   10bdc:	003eae06 	br	10698 <__alt_data_end+0xffff0698>
   10be0:	00c00044 	movi	r3,1
   10be4:	1887c83a 	sub	r3,r3,r2
   10be8:	01000e04 	movi	r4,56
   10bec:	20fe8516 	blt	r4,r3,10604 <__alt_data_end+0xffff0604>
   10bf0:	010007c4 	movi	r4,31
   10bf4:	20c01b16 	blt	r4,r3,10c64 <__muldf3+0x7cc>
   10bf8:	00800804 	movi	r2,32
   10bfc:	10c5c83a 	sub	r2,r2,r3
   10c00:	888a983a 	sll	r5,r17,r2
   10c04:	90c8d83a 	srl	r4,r18,r3
   10c08:	9084983a 	sll	r2,r18,r2
   10c0c:	88e2d83a 	srl	r17,r17,r3
   10c10:	2906b03a 	or	r3,r5,r4
   10c14:	1004c03a 	cmpne	r2,r2,zero
   10c18:	1886b03a 	or	r3,r3,r2
   10c1c:	188001cc 	andi	r2,r3,7
   10c20:	10000726 	beq	r2,zero,10c40 <__muldf3+0x7a8>
   10c24:	188003cc 	andi	r2,r3,15
   10c28:	01000104 	movi	r4,4
   10c2c:	11000426 	beq	r2,r4,10c40 <__muldf3+0x7a8>
   10c30:	1805883a 	mov	r2,r3
   10c34:	10c00104 	addi	r3,r2,4
   10c38:	1885803a 	cmpltu	r2,r3,r2
   10c3c:	88a3883a 	add	r17,r17,r2
   10c40:	8880202c 	andhi	r2,r17,128
   10c44:	10001c26 	beq	r2,zero,10cb8 <__muldf3+0x820>
   10c48:	3027883a 	mov	r19,r6
   10c4c:	00800044 	movi	r2,1
   10c50:	0021883a 	mov	r16,zero
   10c54:	002d883a 	mov	r22,zero
   10c58:	003e6e06 	br	10614 <__alt_data_end+0xffff0614>
   10c5c:	4007883a 	mov	r3,r8
   10c60:	003f9706 	br	10ac0 <__alt_data_end+0xffff0ac0>
   10c64:	017ff844 	movi	r5,-31
   10c68:	2885c83a 	sub	r2,r5,r2
   10c6c:	888ad83a 	srl	r5,r17,r2
   10c70:	00800804 	movi	r2,32
   10c74:	18801a26 	beq	r3,r2,10ce0 <__muldf3+0x848>
   10c78:	01001004 	movi	r4,64
   10c7c:	20c7c83a 	sub	r3,r4,r3
   10c80:	88e2983a 	sll	r17,r17,r3
   10c84:	8ca4b03a 	or	r18,r17,r18
   10c88:	9004c03a 	cmpne	r2,r18,zero
   10c8c:	2884b03a 	or	r2,r5,r2
   10c90:	144001cc 	andi	r17,r2,7
   10c94:	88000d1e 	bne	r17,zero,10ccc <__muldf3+0x834>
   10c98:	0021883a 	mov	r16,zero
   10c9c:	102cd0fa 	srli	r22,r2,3
   10ca0:	3027883a 	mov	r19,r6
   10ca4:	0005883a 	mov	r2,zero
   10ca8:	b46cb03a 	or	r22,r22,r17
   10cac:	003e5906 	br	10614 <__alt_data_end+0xffff0614>
   10cb0:	1007883a 	mov	r3,r2
   10cb4:	0023883a 	mov	r17,zero
   10cb8:	8820927a 	slli	r16,r17,9
   10cbc:	1805883a 	mov	r2,r3
   10cc0:	8822977a 	slli	r17,r17,29
   10cc4:	8020d33a 	srli	r16,r16,12
   10cc8:	003ff406 	br	10c9c <__alt_data_end+0xffff0c9c>
   10ccc:	10c003cc 	andi	r3,r2,15
   10cd0:	01000104 	movi	r4,4
   10cd4:	193ff626 	beq	r3,r4,10cb0 <__alt_data_end+0xffff0cb0>
   10cd8:	0023883a 	mov	r17,zero
   10cdc:	003fd506 	br	10c34 <__alt_data_end+0xffff0c34>
   10ce0:	0023883a 	mov	r17,zero
   10ce4:	003fe706 	br	10c84 <__alt_data_end+0xffff0c84>
   10ce8:	00800434 	movhi	r2,16
   10cec:	8c000234 	orhi	r16,r17,8
   10cf0:	10bfffc4 	addi	r2,r2,-1
   10cf4:	3027883a 	mov	r19,r6
   10cf8:	80a0703a 	and	r16,r16,r2
   10cfc:	902d883a 	mov	r22,r18
   10d00:	003eac06 	br	107b4 <__alt_data_end+0xffff07b4>

00010d04 <__fixdfsi>:
   10d04:	280cd53a 	srli	r6,r5,20
   10d08:	00c00434 	movhi	r3,16
   10d0c:	18ffffc4 	addi	r3,r3,-1
   10d10:	3181ffcc 	andi	r6,r6,2047
   10d14:	01c0ff84 	movi	r7,1022
   10d18:	28c6703a 	and	r3,r5,r3
   10d1c:	280ad7fa 	srli	r5,r5,31
   10d20:	3980120e 	bge	r7,r6,10d6c <__fixdfsi+0x68>
   10d24:	00810744 	movi	r2,1053
   10d28:	11800c16 	blt	r2,r6,10d5c <__fixdfsi+0x58>
   10d2c:	00810cc4 	movi	r2,1075
   10d30:	1185c83a 	sub	r2,r2,r6
   10d34:	01c007c4 	movi	r7,31
   10d38:	18c00434 	orhi	r3,r3,16
   10d3c:	38800d16 	blt	r7,r2,10d74 <__fixdfsi+0x70>
   10d40:	31befb44 	addi	r6,r6,-1043
   10d44:	2084d83a 	srl	r2,r4,r2
   10d48:	1986983a 	sll	r3,r3,r6
   10d4c:	1884b03a 	or	r2,r3,r2
   10d50:	28000726 	beq	r5,zero,10d70 <__fixdfsi+0x6c>
   10d54:	0085c83a 	sub	r2,zero,r2
   10d58:	f800283a 	ret
   10d5c:	00a00034 	movhi	r2,32768
   10d60:	10bfffc4 	addi	r2,r2,-1
   10d64:	2885883a 	add	r2,r5,r2
   10d68:	f800283a 	ret
   10d6c:	0005883a 	mov	r2,zero
   10d70:	f800283a 	ret
   10d74:	008104c4 	movi	r2,1043
   10d78:	1185c83a 	sub	r2,r2,r6
   10d7c:	1884d83a 	srl	r2,r3,r2
   10d80:	003ff306 	br	10d50 <__alt_data_end+0xffff0d50>

00010d84 <__extendsfdf2>:
   10d84:	200ad5fa 	srli	r5,r4,23
   10d88:	defffd04 	addi	sp,sp,-12
   10d8c:	dc400115 	stw	r17,4(sp)
   10d90:	29403fcc 	andi	r5,r5,255
   10d94:	29800044 	addi	r6,r5,1
   10d98:	04402034 	movhi	r17,128
   10d9c:	dc000015 	stw	r16,0(sp)
   10da0:	8c7fffc4 	addi	r17,r17,-1
   10da4:	dfc00215 	stw	ra,8(sp)
   10da8:	31803fcc 	andi	r6,r6,255
   10dac:	00800044 	movi	r2,1
   10db0:	8922703a 	and	r17,r17,r4
   10db4:	2020d7fa 	srli	r16,r4,31
   10db8:	1180110e 	bge	r2,r6,10e00 <__extendsfdf2+0x7c>
   10dbc:	880cd0fa 	srli	r6,r17,3
   10dc0:	8822977a 	slli	r17,r17,29
   10dc4:	2940e004 	addi	r5,r5,896
   10dc8:	2941ffcc 	andi	r5,r5,2047
   10dcc:	2804953a 	slli	r2,r5,20
   10dd0:	01400434 	movhi	r5,16
   10dd4:	800697fa 	slli	r3,r16,31
   10dd8:	297fffc4 	addi	r5,r5,-1
   10ddc:	314a703a 	and	r5,r6,r5
   10de0:	288ab03a 	or	r5,r5,r2
   10de4:	28c6b03a 	or	r3,r5,r3
   10de8:	8805883a 	mov	r2,r17
   10dec:	dfc00217 	ldw	ra,8(sp)
   10df0:	dc400117 	ldw	r17,4(sp)
   10df4:	dc000017 	ldw	r16,0(sp)
   10df8:	dec00304 	addi	sp,sp,12
   10dfc:	f800283a 	ret
   10e00:	2800111e 	bne	r5,zero,10e48 <__extendsfdf2+0xc4>
   10e04:	88001c26 	beq	r17,zero,10e78 <__extendsfdf2+0xf4>
   10e08:	8809883a 	mov	r4,r17
   10e0c:	0010e940 	call	10e94 <__clzsi2>
   10e10:	00c00284 	movi	r3,10
   10e14:	18801b16 	blt	r3,r2,10e84 <__extendsfdf2+0x100>
   10e18:	018002c4 	movi	r6,11
   10e1c:	308dc83a 	sub	r6,r6,r2
   10e20:	11000544 	addi	r4,r2,21
   10e24:	8986d83a 	srl	r3,r17,r6
   10e28:	8922983a 	sll	r17,r17,r4
   10e2c:	0180e244 	movi	r6,905
   10e30:	01400434 	movhi	r5,16
   10e34:	3085c83a 	sub	r2,r6,r2
   10e38:	297fffc4 	addi	r5,r5,-1
   10e3c:	194c703a 	and	r6,r3,r5
   10e40:	1141ffcc 	andi	r5,r2,2047
   10e44:	003fe006 	br	10dc8 <__alt_data_end+0xffff0dc8>
   10e48:	88000826 	beq	r17,zero,10e6c <__extendsfdf2+0xe8>
   10e4c:	880cd0fa 	srli	r6,r17,3
   10e50:	00800434 	movhi	r2,16
   10e54:	10bfffc4 	addi	r2,r2,-1
   10e58:	31800234 	orhi	r6,r6,8
   10e5c:	8822977a 	slli	r17,r17,29
   10e60:	308c703a 	and	r6,r6,r2
   10e64:	0141ffc4 	movi	r5,2047
   10e68:	003fd706 	br	10dc8 <__alt_data_end+0xffff0dc8>
   10e6c:	0141ffc4 	movi	r5,2047
   10e70:	000d883a 	mov	r6,zero
   10e74:	003fd406 	br	10dc8 <__alt_data_end+0xffff0dc8>
   10e78:	000b883a 	mov	r5,zero
   10e7c:	000d883a 	mov	r6,zero
   10e80:	003fd106 	br	10dc8 <__alt_data_end+0xffff0dc8>
   10e84:	11bffd44 	addi	r6,r2,-11
   10e88:	8986983a 	sll	r3,r17,r6
   10e8c:	0023883a 	mov	r17,zero
   10e90:	003fe606 	br	10e2c <__alt_data_end+0xffff0e2c>

00010e94 <__clzsi2>:
   10e94:	00bfffd4 	movui	r2,65535
   10e98:	11000536 	bltu	r2,r4,10eb0 <__clzsi2+0x1c>
   10e9c:	00803fc4 	movi	r2,255
   10ea0:	11000f36 	bltu	r2,r4,10ee0 <__clzsi2+0x4c>
   10ea4:	00800804 	movi	r2,32
   10ea8:	0007883a 	mov	r3,zero
   10eac:	00000506 	br	10ec4 <__clzsi2+0x30>
   10eb0:	00804034 	movhi	r2,256
   10eb4:	10bfffc4 	addi	r2,r2,-1
   10eb8:	11000c2e 	bgeu	r2,r4,10eec <__clzsi2+0x58>
   10ebc:	00800204 	movi	r2,8
   10ec0:	00c00604 	movi	r3,24
   10ec4:	20c8d83a 	srl	r4,r4,r3
   10ec8:	00c00074 	movhi	r3,1
   10ecc:	18c50104 	addi	r3,r3,5124
   10ed0:	1909883a 	add	r4,r3,r4
   10ed4:	20c00003 	ldbu	r3,0(r4)
   10ed8:	10c5c83a 	sub	r2,r2,r3
   10edc:	f800283a 	ret
   10ee0:	00800604 	movi	r2,24
   10ee4:	00c00204 	movi	r3,8
   10ee8:	003ff606 	br	10ec4 <__alt_data_end+0xffff0ec4>
   10eec:	00800404 	movi	r2,16
   10ef0:	1007883a 	mov	r3,r2
   10ef4:	003ff306 	br	10ec4 <__alt_data_end+0xffff0ec4>

00010ef8 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10ef8:	008007c4 	movi	r2,31
   10efc:	11002136 	bltu	r2,r4,10f84 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f00:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f04:	00ffff84 	movi	r3,-2
   10f08:	38c4703a 	and	r2,r7,r3
   10f0c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   10f10:	200490fa 	slli	r2,r4,3
   10f14:	02000074 	movhi	r8,1
   10f18:	42060f04 	addi	r8,r8,6204
   10f1c:	4085883a 	add	r2,r8,r2
   10f20:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   10f24:	11400115 	stw	r5,4(r2)
   10f28:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   10f2c:	30000726 	beq	r6,zero,10f4c <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f30:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f34:	28c6703a 	and	r3,r5,r3
   10f38:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   10f3c:	d0e05017 	ldw	r3,-32448(gp)
   10f40:	1104983a 	sll	r2,r2,r4
   10f44:	10c4b03a 	or	r2,r2,r3
   10f48:	00000706 	br	10f68 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f4c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f50:	28c6703a 	and	r3,r5,r3
   10f54:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   10f58:	1104983a 	sll	r2,r2,r4
   10f5c:	d0e05017 	ldw	r3,-32448(gp)
   10f60:	0084303a 	nor	r2,zero,r2
   10f64:	10c4703a 	and	r2,r2,r3
   10f68:	d0a05015 	stw	r2,-32448(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10f6c:	d0a05017 	ldw	r2,-32448(gp)
   10f70:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f74:	2801703a 	wrctl	status,r5
   10f78:	3801703a 	wrctl	status,r7
   10f7c:	0005883a 	mov	r2,zero
   10f80:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   10f84:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   10f88:	f800283a 	ret

00010f8c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10f8c:	deffff04 	addi	sp,sp,-4
   10f90:	01000074 	movhi	r4,1
   10f94:	01400074 	movhi	r5,1
   10f98:	dfc00015 	stw	ra,0(sp)
   10f9c:	21054404 	addi	r4,r4,5392
   10fa0:	29458904 	addi	r5,r5,5668

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10fa4:	2140061e 	bne	r4,r5,10fc0 <alt_load+0x34>
   10fa8:	01000074 	movhi	r4,1
   10fac:	01400074 	movhi	r5,1
   10fb0:	21000804 	addi	r4,r4,32
   10fb4:	29400804 	addi	r5,r5,32
   10fb8:	2140121e 	bne	r4,r5,11004 <alt_load+0x78>
   10fbc:	00000b06 	br	10fec <alt_load+0x60>
   10fc0:	00c00074 	movhi	r3,1
   10fc4:	18c58904 	addi	r3,r3,5668
   10fc8:	1907c83a 	sub	r3,r3,r4
   10fcc:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10fd0:	10fff526 	beq	r2,r3,10fa8 <__alt_data_end+0xffff0fa8>
    {
      *to++ = *from++;
   10fd4:	114f883a 	add	r7,r2,r5
   10fd8:	39c00017 	ldw	r7,0(r7)
   10fdc:	110d883a 	add	r6,r2,r4
   10fe0:	10800104 	addi	r2,r2,4
   10fe4:	31c00015 	stw	r7,0(r6)
   10fe8:	003ff906 	br	10fd0 <__alt_data_end+0xffff0fd0>
   10fec:	01000074 	movhi	r4,1
   10ff0:	01400074 	movhi	r5,1
   10ff4:	2104f804 	addi	r4,r4,5088
   10ff8:	2944f804 	addi	r5,r5,5088

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10ffc:	2140101e 	bne	r4,r5,11040 <alt_load+0xb4>
   11000:	00000b06 	br	11030 <alt_load+0xa4>
   11004:	00c00074 	movhi	r3,1
   11008:	18c06004 	addi	r3,r3,384
   1100c:	1907c83a 	sub	r3,r3,r4
   11010:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11014:	10fff526 	beq	r2,r3,10fec <__alt_data_end+0xffff0fec>
    {
      *to++ = *from++;
   11018:	114f883a 	add	r7,r2,r5
   1101c:	39c00017 	ldw	r7,0(r7)
   11020:	110d883a 	add	r6,r2,r4
   11024:	10800104 	addi	r2,r2,4
   11028:	31c00015 	stw	r7,0(r6)
   1102c:	003ff906 	br	11014 <__alt_data_end+0xffff1014>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11030:	00112280 	call	11228 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   11034:	dfc00017 	ldw	ra,0(sp)
   11038:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   1103c:	00113141 	jmpi	11314 <alt_icache_flush_all>
   11040:	00c00074 	movhi	r3,1
   11044:	18c54404 	addi	r3,r3,5392
   11048:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1104c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11050:	18bff726 	beq	r3,r2,11030 <__alt_data_end+0xffff1030>
    {
      *to++ = *from++;
   11054:	114f883a 	add	r7,r2,r5
   11058:	39c00017 	ldw	r7,0(r7)
   1105c:	110d883a 	add	r6,r2,r4
   11060:	10800104 	addi	r2,r2,4
   11064:	31c00015 	stw	r7,0(r6)
   11068:	003ff906 	br	11050 <__alt_data_end+0xffff1050>

0001106c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1106c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11070:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11074:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11078:	00110980 	call	11098 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1107c:	00110b80 	call	110b8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11080:	d1a05117 	ldw	r6,-32444(gp)
   11084:	d1605217 	ldw	r5,-32440(gp)
   11088:	d1205317 	ldw	r4,-32436(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   1108c:	dfc00017 	ldw	ra,0(sp)
   11090:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11094:	00104201 	jmpi	10420 <main>

00011098 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11098:	deffff04 	addi	sp,sp,-4
   1109c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   110a0:	00113180 	call	11318 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   110a4:	00800044 	movi	r2,1
   110a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   110ac:	dfc00017 	ldw	ra,0(sp)
   110b0:	dec00104 	addi	sp,sp,4
   110b4:	f800283a 	ret

000110b8 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   110b8:	01000074 	movhi	r4,1
   110bc:	d1600304 	addi	r5,gp,-32756
   110c0:	21056004 	addi	r4,r4,5504
   110c4:	00112341 	jmpi	11234 <alt_dev_llist_insert>

000110c8 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   110c8:	d1600304 	addi	r5,gp,-32756
   110cc:	00112a01 	jmpi	112a0 <alt_find_dev>

000110d0 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   110d0:	20800a17 	ldw	r2,40(r4)
   110d4:	10800023 	ldbuio	r2,0(r2)
   110d8:	28800005 	stb	r2,0(r5)

	return 0;
}
   110dc:	0005883a 	mov	r2,zero
   110e0:	f800283a 	ret

000110e4 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   110e4:	20800a17 	ldw	r2,40(r4)
   110e8:	29400fcc 	andi	r5,r5,63
   110ec:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   110f0:	20800a17 	ldw	r2,40(r4)
   110f4:	10800063 	ldbuio	r2,1(r2)
   110f8:	30800005 	stb	r2,0(r6)

	return 0;
}
   110fc:	0005883a 	mov	r2,zero
   11100:	f800283a 	ret

00011104 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11104:	20800a17 	ldw	r2,40(r4)
   11108:	29400fcc 	andi	r5,r5,63
   1110c:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   11110:	20800a17 	ldw	r2,40(r4)
   11114:	11800065 	stbio	r6,1(r2)

	return 0;
}
   11118:	0005883a 	mov	r2,zero
   1111c:	f800283a 	ret

00011120 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11120:	20800a17 	ldw	r2,40(r4)
   11124:	00c00c84 	movi	r3,50
   11128:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1112c:	20800a17 	ldw	r2,40(r4)
   11130:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11134:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11138:	10803fcc 	andi	r2,r2,255
   1113c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11140:	20800a17 	ldw	r2,40(r4)
   11144:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11148:	20800a17 	ldw	r2,40(r4)
   1114c:	10800063 	ldbuio	r2,1(r2)
   11150:	10803fcc 	andi	r2,r2,255
   11154:	1006923a 	slli	r3,r2,8
   11158:	28800017 	ldw	r2,0(r5)
   1115c:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   11160:	10e0000c 	andi	r3,r2,32768
   11164:	18000126 	beq	r3,zero,1116c <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   11168:	10bffff4 	orhi	r2,r2,65535
   1116c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11170:	0005883a 	mov	r2,zero
   11174:	f800283a 	ret

00011178 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11178:	20800a17 	ldw	r2,40(r4)
   1117c:	00c00d04 	movi	r3,52
   11180:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11184:	20800a17 	ldw	r2,40(r4)
   11188:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1118c:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11190:	10803fcc 	andi	r2,r2,255
   11194:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11198:	20800a17 	ldw	r2,40(r4)
   1119c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   111a0:	20800a17 	ldw	r2,40(r4)
   111a4:	10800063 	ldbuio	r2,1(r2)
   111a8:	10803fcc 	andi	r2,r2,255
   111ac:	1006923a 	slli	r3,r2,8
   111b0:	28800017 	ldw	r2,0(r5)
   111b4:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   111b8:	10e0000c 	andi	r3,r2,32768
   111bc:	18000126 	beq	r3,zero,111c4 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   111c0:	10bffff4 	orhi	r2,r2,65535
   111c4:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   111c8:	0005883a 	mov	r2,zero
   111cc:	f800283a 	ret

000111d0 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   111d0:	20800a17 	ldw	r2,40(r4)
   111d4:	00c00d84 	movi	r3,54
   111d8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   111dc:	20800a17 	ldw	r2,40(r4)
   111e0:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   111e4:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   111e8:	10803fcc 	andi	r2,r2,255
   111ec:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   111f0:	20800a17 	ldw	r2,40(r4)
   111f4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   111f8:	20800a17 	ldw	r2,40(r4)
   111fc:	10800063 	ldbuio	r2,1(r2)
   11200:	10803fcc 	andi	r2,r2,255
   11204:	1006923a 	slli	r3,r2,8
   11208:	28800017 	ldw	r2,0(r5)
   1120c:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   11210:	10e0000c 	andi	r3,r2,32768
   11214:	18000126 	beq	r3,zero,1121c <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   11218:	10bffff4 	orhi	r2,r2,65535
   1121c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11220:	0005883a 	mov	r2,zero
   11224:	f800283a 	ret

00011228 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11228:	f800283a 	ret

0001122c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   1122c:	3005883a 	mov	r2,r6
   11230:	f800283a 	ret

00011234 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11234:	20000226 	beq	r4,zero,11240 <alt_dev_llist_insert+0xc>
   11238:	20800217 	ldw	r2,8(r4)
   1123c:	1000101e 	bne	r2,zero,11280 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11240:	d0a00717 	ldw	r2,-32740(gp)
   11244:	10000926 	beq	r2,zero,1126c <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11248:	deffff04 	addi	sp,sp,-4
   1124c:	dfc00015 	stw	ra,0(sp)
   11250:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11254:	00c00584 	movi	r3,22
   11258:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1125c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11260:	dfc00017 	ldw	ra,0(sp)
   11264:	dec00104 	addi	sp,sp,4
   11268:	f800283a 	ret
   1126c:	d0a05504 	addi	r2,gp,-32428
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11270:	00c00584 	movi	r3,22
   11274:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11278:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   1127c:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   11280:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11284:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   11288:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   1128c:	28800017 	ldw	r2,0(r5)
   11290:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   11294:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   11298:	0005883a 	mov	r2,zero
   1129c:	f800283a 	ret

000112a0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   112a0:	defffb04 	addi	sp,sp,-20
   112a4:	dcc00315 	stw	r19,12(sp)
   112a8:	dc800215 	stw	r18,8(sp)
   112ac:	dc400115 	stw	r17,4(sp)
   112b0:	dc000015 	stw	r16,0(sp)
   112b4:	dfc00415 	stw	ra,16(sp)
   112b8:	2027883a 	mov	r19,r4
   112bc:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   112c0:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   112c4:	00113c40 	call	113c4 <strlen>
   112c8:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   112cc:	84400726 	beq	r16,r17,112ec <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   112d0:	81000217 	ldw	r4,8(r16)
   112d4:	900d883a 	mov	r6,r18
   112d8:	980b883a 	mov	r5,r19
   112dc:	00113940 	call	11394 <memcmp>
   112e0:	10000426 	beq	r2,zero,112f4 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   112e4:	84000017 	ldw	r16,0(r16)
   112e8:	003ff806 	br	112cc <__alt_data_end+0xffff12cc>
  }
  
  /* No match found */
  
  return NULL;
   112ec:	0005883a 	mov	r2,zero
   112f0:	00000106 	br	112f8 <alt_find_dev+0x58>
   112f4:	8005883a 	mov	r2,r16
}
   112f8:	dfc00417 	ldw	ra,16(sp)
   112fc:	dcc00317 	ldw	r19,12(sp)
   11300:	dc800217 	ldw	r18,8(sp)
   11304:	dc400117 	ldw	r17,4(sp)
   11308:	dc000017 	ldw	r16,0(sp)
   1130c:	dec00504 	addi	sp,sp,20
   11310:	f800283a 	ret

00011314 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11314:	f800283a 	ret

00011318 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   11318:	000170fa 	wrctl	ienable,zero
   1131c:	f800283a 	ret

00011320 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   11320:	213ffe84 	addi	r4,r4,-6
   11324:	008003c4 	movi	r2,15
   11328:	11001636 	bltu	r2,r4,11384 <alt_exception_cause_generated_bad_addr+0x64>
   1132c:	200890ba 	slli	r4,r4,2
   11330:	00800074 	movhi	r2,1
   11334:	1084d104 	addi	r2,r2,4932
   11338:	2089883a 	add	r4,r4,r2
   1133c:	20800017 	ldw	r2,0(r4)
   11340:	1000683a 	jmp	r2
   11344:	0001138c 	andi	zero,zero,1102
   11348:	0001138c 	andi	zero,zero,1102
   1134c:	00011384 	movi	zero,1102
   11350:	00011384 	movi	zero,1102
   11354:	00011384 	movi	zero,1102
   11358:	0001138c 	andi	zero,zero,1102
   1135c:	00011384 	movi	zero,1102
   11360:	00011384 	movi	zero,1102
   11364:	0001138c 	andi	zero,zero,1102
   11368:	0001138c 	andi	zero,zero,1102
   1136c:	00011384 	movi	zero,1102
   11370:	0001138c 	andi	zero,zero,1102
   11374:	00011384 	movi	zero,1102
   11378:	00011384 	movi	zero,1102
   1137c:	00011384 	movi	zero,1102
   11380:	0001138c 	andi	zero,zero,1102
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11384:	0005883a 	mov	r2,zero
   11388:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1138c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   11390:	f800283a 	ret

00011394 <memcmp>:
   11394:	218d883a 	add	r6,r4,r6
   11398:	21800826 	beq	r4,r6,113bc <memcmp+0x28>
   1139c:	20800003 	ldbu	r2,0(r4)
   113a0:	28c00003 	ldbu	r3,0(r5)
   113a4:	10c00226 	beq	r2,r3,113b0 <memcmp+0x1c>
   113a8:	10c5c83a 	sub	r2,r2,r3
   113ac:	f800283a 	ret
   113b0:	21000044 	addi	r4,r4,1
   113b4:	29400044 	addi	r5,r5,1
   113b8:	003ff706 	br	11398 <__alt_data_end+0xffff1398>
   113bc:	0005883a 	mov	r2,zero
   113c0:	f800283a 	ret

000113c4 <strlen>:
   113c4:	2005883a 	mov	r2,r4
   113c8:	10c00007 	ldb	r3,0(r2)
   113cc:	18000226 	beq	r3,zero,113d8 <strlen+0x14>
   113d0:	10800044 	addi	r2,r2,1
   113d4:	003ffc06 	br	113c8 <__alt_data_end+0xffff13c8>
   113d8:	1105c83a 	sub	r2,r2,r4
   113dc:	f800283a 	ret
